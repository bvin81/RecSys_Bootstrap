#!/usr/bin/env python3
"""
ADATB√ÅZIS RESET SCRIPT - database_reset_script.py
T√∂rli a szimul√°ci√≥s adatokat a nudging teszt √∫jrafuttat√°s√°hoz

HASZN√ÅLAT:
1. M√°sold ki ezt a k√≥dot egy database_reset_script.py f√°jlba
2. Futtasd: python database_reset_script.py
3. Er≈ës√≠tsd meg a t√∂rl√©st
4. Futtatsd a sym_nudge.py szimul√°ci√≥t
"""

import psycopg2
import os
import logging
from datetime import datetime

# Logging be√°ll√≠t√°s
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_db_connection():
    """Adatb√°zis kapcsolat l√©trehoz√°sa"""
    try:
        # Heroku Postgres URL vagy helyi be√°ll√≠t√°s
        database_url = os.environ.get('DATABASE_URL')
        if database_url:
            conn = psycopg2.connect(database_url, sslmode='require')
        else:
            # Helyi PostgreSQL be√°ll√≠t√°sok
            conn = psycopg2.connect(
                host=os.environ.get('DB_HOST', 'localhost'),
                database=os.environ.get('DB_NAME', 'greenrec'),
                user=os.environ.get('DB_USER', 'postgres'),
                password=os.environ.get('DB_PASSWORD', 'password'),
                port=os.environ.get('DB_PORT', '5432')
            )
        return conn
    except Exception as e:
        logger.error(f"‚ùå Adatb√°zis kapcsol√≥d√°si hiba: {e}")
        return None

def backup_current_data():
    """Jelenlegi adatok biztons√°gi ment√©se"""
    try:
        conn = get_db_connection()
        if not conn:
            return False
            
        cur = conn.cursor()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # User choices backup
        cur.execute("SELECT COUNT(*) FROM user_choices")
        choices_count = cur.fetchone()[0]
        
        # Recommendation sessions backup  
        cur.execute("SELECT COUNT(*) FROM recommendation_sessions")
        sessions_count = cur.fetchone()[0]
        
        # Users backup
        cur.execute("SELECT COUNT(*) FROM users WHERE username LIKE 'user_%'")
        test_users_count = cur.fetchone()[0]
        
        logger.info(f"üìä BACKUP INFORM√ÅCI√ì:")
        logger.info(f"   User choices: {choices_count} db")
        logger.info(f"   Sessions: {sessions_count} db") 
        logger.info(f"   Test users: {test_users_count} db")
        logger.info(f"   Backup timestamp: {timestamp}")
        
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Backup hiba: {e}")
        return False

def reset_simulation_data():
    """Szimul√°ci√≥s adatok t√∂rl√©se"""
    try:
        conn = get_db_connection()
        if not conn:
            return False
            
        cur = conn.cursor()
        
        logger.info("üóëÔ∏è  SZIMUL√ÅCI√ìS ADATOK T√ñRL√âSE...")
        
        # 1. User choices t√∂rl√©se
        cur.execute("DELETE FROM user_choices")
        deleted_choices = cur.rowcount
        logger.info(f"   ‚úÖ User choices t√∂r√∂lve: {deleted_choices} db")
        
        # 2. Recommendation sessions t√∂rl√©se  
        cur.execute("DELETE FROM recommendation_sessions")
        deleted_sessions = cur.rowcount
        logger.info(f"   ‚úÖ Sessions t√∂r√∂lve: {deleted_sessions} db")
        
        # 3. Test felhaszn√°l√≥k t√∂rl√©se (user_ prefixszel)
        cur.execute("DELETE FROM users WHERE username LIKE 'user_%' OR username LIKE 'fixed_%'")
        deleted_users = cur.rowcount
        logger.info(f"   ‚úÖ Test users t√∂r√∂lve: {deleted_users} db")
        
        # 4. Sequence-k reset (ha sz√ºks√©ges)
        cur.execute("SELECT setval('users_id_seq', (SELECT MAX(id) FROM users))")
        cur.execute("SELECT setval('user_choices_id_seq', 1, false)")
        cur.execute("SELECT setval('recommendation_sessions_id_seq', 1, false)")
        
        # Commit changes
        conn.commit()
        logger.info("‚úÖ Adatb√°zis sikeresen resetelve!")
        
        # Verification
        cur.execute("SELECT COUNT(*) FROM user_choices")
        remaining_choices = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM recommendation_sessions") 
        remaining_sessions = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM users WHERE username LIKE 'user_%'")
        remaining_test_users = cur.fetchone()[0]
        
        logger.info(f"üìä ELLEN≈êRZ√âS RESET UT√ÅN:")
        logger.info(f"   User choices: {remaining_choices} db")
        logger.info(f"   Sessions: {remaining_sessions} db")
        logger.info(f"   Test users: {remaining_test_users} db")
        
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Reset hiba: {e}")
        return False

def preserve_real_users():
    """Val√≥di felhaszn√°l√≥k meg≈ërz√©se (nem test users)"""
    try:
        conn = get_db_connection()
        if not conn:
            return False
            
        cur = conn.cursor()
        
        # Val√≥di felhaszn√°l√≥k sz√°ma
        cur.execute("SELECT COUNT(*) FROM users WHERE username NOT LIKE 'user_%' AND username NOT LIKE 'fixed_%'")
        real_users_count = cur.fetchone()[0]
        
        logger.info(f"üîí VAL√ìDI FELHASZN√ÅL√ìK MEG≈êRIZVE: {real_users_count} db")
        
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Felhaszn√°l√≥ ellen≈ërz√©si hiba: {e}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ ADATB√ÅZIS RESET IND√çT√ÅSA")
    logger.info("üéØ C√©l: Nudging szimul√°ci√≥hoz val√≥ el≈ëk√©sz√≠t√©s")
    
    # 1. Backup jelenlegi adatok
    logger.info("\nüì¶ 1. BIZTONS√ÅGI MENT√âS...")
    if backup_current_data():
        logger.info("‚úÖ Backup sikeres")
    else:
        logger.error("‚ùå Backup sikertelen")
        exit(1)
    
    # 2. Meger≈ës√≠t√©s k√©r√©se
    print("\n‚ö†Ô∏è  FIGYELEM: Ez t√∂r√∂lni fogja az √∂sszes szimul√°ci√≥s adatot!")
    print("   - User choices")
    print("   - Recommendation sessions") 
    print("   - Test felhaszn√°l√≥k (user_*, fixed_*)")
    print("   - Val√≥di felhaszn√°l√≥k megmaradnak")
    
    confirm = input("\nüí≠ Biztosan folytatod? (igen/nem): ").lower().strip()
    
    if confirm not in ['igen', 'yes', 'y', 'i']:
        logger.info("‚ùå Reset megszak√≠tva felhaszn√°l√≥ √°ltal")
        exit(0)
    
    # 3. Reset v√©grehajt√°sa
    logger.info("\nüóëÔ∏è  2. RESET V√âGREHAJT√ÅSA...")
    if reset_simulation_data():
        logger.info("‚úÖ Reset sikeres")
    else:
        logger.error("‚ùå Reset sikertelen")
        exit(1)
    
    # 4. Val√≥di felhaszn√°l√≥k ellen≈ërz√©se
    logger.info("\nüîí 3. VAL√ìDI FELHASZN√ÅL√ìK ELLEN≈êRZ√âSE...")
    if preserve_real_users():
        logger.info("‚úÖ Val√≥di felhaszn√°l√≥k biztons√°gban")
    else:
        logger.warning("‚ö†Ô∏è  Val√≥di felhaszn√°l√≥k ellen≈ërz√©se sikertelen")
    
    logger.info("\nüéâ ADATB√ÅZIS RESET BEFEJEZVE!")
    logger.info("üöÄ Most futtathatod a sym_nudge.py szimul√°ci√≥t:")
    logger.info("   python sym_nudge.py")
