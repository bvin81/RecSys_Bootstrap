"""
complete_fixed_simulator.py - Teljes Jav√≠tott GreenRec Szimul√°tor
ESI normaliz√°l√°s jav√≠tva + Nudging mechanizmus + Heroku kompatibilit√°s
"""

import random
import json
import requests
import time
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
import logging

# Logging be√°ll√≠t√°sa
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FixedVirtualUser:
    """
    TELJES JAV√çTOTT Virtu√°lis felhaszn√°l√≥
    ‚úÖ ESI normaliz√°l√°s jav√≠tva
    ‚úÖ Nudging mechanizmus implement√°lva
    ‚úÖ Re√°lis A < B < C grad√°ci√≥
    """
    
    def __init__(self, user_type, username):
        self.user_type = user_type
        self.username = username
        self.group = random.choice(['A', 'B', 'C'])  # V√©letlenszer≈± csoportbeoszt√°s
        self.session = requests.Session()
        self.base_url = "https://boots-c9ce40a0998d.herokuapp.com"
        
        # Preferencia s√∫lyok (eredeti)
        self.preferences = self._get_preferences(user_type)
        
        # Nudging hat√°s nyomon k√∂vet√©se
        self.nudge_effects = {
            'visual_nudges': 0,
            'explanation_nudges': 0,
            'total_nudge_impact': 0
        }
        
        # V√°laszt√°si statisztik√°k
        self.choices_made = []
        self.session_start_time = None
        self.total_choices = 0
        
    def _get_preferences(self, user_type):
        """Felhaszn√°l√≥ t√≠pus alapj√°n preferencia s√∫lyok"""
        preferences = {
            'egeszsegtudatos': {
                'hsi_weight': 0.7,
                'esi_weight': 0.2, 
                'ppi_weight': 0.1,
                'choice_probability': 0.85,
                'choices_per_session': (3, 6),
                'description': 'Magas HSI √©rt√©keket keres'
            },
            'kornyezettudatos': {
                'hsi_weight': 0.2,
                'esi_weight': 0.6,
                'ppi_weight': 0.2,
                'choice_probability': 0.80,
                'choices_per_session': (3, 6),
                'description': 'Alacsony k√∂rnyezeti hat√°st keres'
            },
            'izorgia': {
                'hsi_weight': 0.1,
                'esi_weight': 0.1,
                'ppi_weight': 0.8,
                'choice_probability': 0.90,
                'choices_per_session': (4, 7),
                'description': 'N√©pszer≈±s√©get √©s √≠zt keres'
            },
            'kiegyensulyozott': {
                'hsi_weight': 0.4,
                'esi_weight': 0.3,
                'ppi_weight': 0.3,
                'choice_probability': 0.75,
                'choices_per_session': (3, 5),
                'description': 'Kiegyens√∫lyozott megk√∂zel√≠t√©s'
            },
            'kenyelmi': {
                'hsi_weight': 0.2,
                'esi_weight': 0.1,
                'ppi_weight': 0.7,
                'choice_probability': 0.70,
                'choices_per_session': (2, 4),
                'description': 'Egyszer≈±s√©get √©s k√©nyelmet keres'
            },
            'ujdonsagkereso': {
                'hsi_weight': 0.3,
                'esi_weight': 0.2,
                'ppi_weight': 0.5,
                'choice_probability': 0.80,
                'choices_per_session': (3, 5),
                'description': '√öjdons√°gokat √©s izgalmas √≠zeket keres'
            }
        }
        
        return preferences.get(user_type, preferences['kiegyensulyozott'])
    
    def register_and_login(self):
        """Felhaszn√°l√≥ regisztr√°ci√≥ja √©s bejelentkez√©se"""
        try:
            # Regisztr√°ci√≥
            register_data = {
                'username': self.username,
                'password': 'virtual123',
                'group': self.group  # Explicit csoport megad√°s
            }
            
            register_response = self.session.post(
                f"{self.base_url}/register",
                data=register_data,
                timeout=15
            )
            
            if register_response.status_code != 200:
                logger.warning(f"‚ö†Ô∏è {self.username} regisztr√°ci√≥ nem siker√ºlt, pr√≥b√°ljunk bejelentkez√©st")
            
            # Bejelentkez√©s
            login_data = {
                'username': self.username,
                'password': 'virtual123'
            }
            
            login_response = self.session.post(
                f"{self.base_url}/login",
                data=login_data,
                timeout=15
            )
            
            if login_response.status_code == 200 and 'login' not in login_response.url:
                logger.info(f"‚úÖ {self.username} ({self.group} csoport) sikeresen bejelentkezett")
                return True
            else:
                logger.error(f"‚ùå {self.username} bejelentkez√©s sikertelen")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå {self.username} auth hiba: {e}")
            return False
    
    def get_recommendations(self):
        """Aj√°nl√°sok lek√©r√©se"""
        try:
            # Preferenci√°k k√ºld√©se az aj√°nl√≥rendszernek
            user_preferences = {
                'user_type': self.user_type,
                'group': self.group,
                'hsi_weight': self.preferences['hsi_weight'],
                'esi_weight': self.preferences['esi_weight'],
                'ppi_weight': self.preferences['ppi_weight']
            }
            
            response = self.session.post(
                f"{self.base_url}/recommend",
                json=user_preferences,
                timeout=20
            )
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    recommendations = result.get('recommendations', [])
                    if isinstance(recommendations, list) and recommendations:
                        logger.info(f"üìã {self.username} kapott {len(recommendations)} aj√°nl√°st")
                        return recommendations
                except json.JSONDecodeError:
                    logger.warning(f"‚ö†Ô∏è {self.username} - JSON decode error")
            
            logger.warning(f"‚ö†Ô∏è {self.username} - Aj√°nl√°sok lek√©r√©se sikertelen")
            return []
            
        except Exception as e:
            logger.error(f"‚ùå {self.username} aj√°nl√°s hiba: {e}")
            return []
    
    def calculate_preference_score(self, recipe):
        """
        JAV√çTOTT - Recept √©rt√©kel√©se HELYES ESI kezel√©ssel + NUDGING
        A/B/C teszt hat√°s√°nak realisztikus szimul√°l√°sa
        """
        
        # ===== CSOPORTONK√âNTI L√ÅTHAT√ìS√ÅG √âS NUDGING =====
        if self.group == 'A':
            # A CSOPORT: NEM l√°tja a pontsz√°mokat - NINCS NUDGING
            score = self._calculate_intuitive_score(recipe)
            
        elif self.group == 'B':
            # B CSOPORT: L√ÅTJA a pontsz√°mokat - VISUAL NUDGING
            hsi = recipe.get('hsi', 50)
            esi = recipe.get('esi', 50) 
            ppi = recipe.get('ppi', 50)
            score = self._calculate_informed_score_with_visual_nudging(recipe, hsi, esi, ppi)
            
        elif self.group == 'C':
            # C CSOPORT: Pontsz√°mok + MAGYAR√ÅZAT - ER≈êS NUDGING
            hsi = recipe.get('hsi', 50)
            esi = recipe.get('esi', 50)
            ppi = recipe.get('ppi', 50) 
            score = self._calculate_explained_score_with_strong_nudging(recipe, hsi, esi, ppi)
        
        else:
            # Fallback
            score = 50.0
        
        # Emberi unpredictability zaj
        noise = random.uniform(-3, 3)
        score += noise
        
        return max(5, min(95, score))  # 5-95 tartom√°ny
    
    def _calculate_intuitive_score(self, recipe):
        """
        A CSOPORT: Tiszt√°n intuit√≠v d√∂nt√©s pontsz√°mok n√©lk√ºl
        NINCS NUDGING - csak eredeti preferenci√°k
        """
        score = 50.0  # Semleges alappontsz√°m
        
        title = recipe.get('title', '').lower()
        category = recipe.get('category', '').lower()
        ingredients = recipe.get('ingredients', '').lower()
        
        # ===== INTUIT√çV PREFERENCI√ÅK =====
        
        if self.user_type == 'egeszsegtudatos':
            healthy_keywords = ['sal√°ta', 'z√∂lds√©g', 'quinoa', 'avok√°d√≥', 'brokkoli', 
                               'spen√≥t', 'bio', 'teljes ki≈ërl√©s≈±', 'vitamin']
            for keyword in healthy_keywords:
                if keyword in title or keyword in ingredients:
                    score += 12
            
            unhealthy_keywords = ['s√ºlt', 'r√°ntott', 'szalonna', 'kolb√°sz', 'zs√≠ros', 'cukros']
            for keyword in unhealthy_keywords:
                if keyword in title or keyword in ingredients:
                    score -= 8
        
        elif self.user_type == 'kornyezettudatos':
            eco_keywords = ['veget√°ri√°nus', 'veg√°n', 'n√∂v√©nyi', 'z√∂lds√©g', 'bab', 
                           'lencse', 'csicseribors√≥', 'tofu', 'helyi', 'bio']
            for keyword in eco_keywords:
                if keyword in title or keyword in ingredients:
                    score += 14
            
            meat_keywords = ['marhah√∫s', 'sert√©s', 'csirke', 'hal', 'tonhal', 'h√∫s']
            for keyword in meat_keywords:
                if keyword in title or keyword in ingredients:
                    score -= 12
        
        elif self.user_type == 'izorgia':
            tasty_keywords = ['sajtos', 'tejsz√≠nes', 'csokol√°d√©s', 'karamell', 
                             'pizza', 'burger', 'pasta', 'rizott√≥', 'kr√©mes']
            for keyword in tasty_keywords:
                if keyword in title or keyword in ingredients:
                    score += 15
        
        elif self.user_type == 'kenyelmi':
            easy_keywords = ['gyors', 'egyszer≈±', 'mikrohull√°m', '15 perc', 
                            'instant', 'melegszendvics', 'k√©sz']
            for keyword in easy_keywords:
                if keyword in title or keyword in ingredients:
                    score += 18
        
        elif self.user_type == 'ujdonsagkereso':
            exotic_keywords = ['thai', 'indiai', 'mexik√≥i', 'marokk√≥i', 'kimcsi', 
                              'curry', 'exotic', 'f≈±szeres', '√°zsiai']
            for keyword in exotic_keywords:
                if keyword in title or keyword in ingredients:
                    score += 16
        
        return score
    
    def _calculate_informed_score_with_visual_nudging(self, recipe, hsi, esi, ppi):
        """
        B CSOPORT: JAV√çTOTT - Pontsz√°m-tudatos d√∂nt√©s + VISUAL NUDGING
        ‚úÖ Helyes ESI kezel√©s: Az alkalmaz√°s m√°r inverz 0-100 sk√°l√°n adja √°t
        """
        # ===== JAV√çTOTT ESI NORMALIZ√ÅL√ÅS =====
        # Az alkalmaz√°s m√°r inverz ESI-t ad (magasabb = jobb k√∂rnyezetileg, 0-100 sk√°la)
        hsi_norm = hsi / 100.0         # 0-100 -> 0-1
        esi_norm = esi / 100.0         # ‚úÖ JAV√çT√ÅS: ESI m√°r inverz 0-100 sk√°l√°n!
        ppi_norm = ppi / 100.0         # 0-100 -> 0-1
        
        # Alappontsz√°m helyes normaliz√°l√°ssal
        base_score = (
            self.preferences['hsi_weight'] * hsi_norm +
            self.preferences['esi_weight'] * esi_norm +  # ‚úÖ JAV√çTVA!
            self.preferences['ppi_weight'] * ppi_norm
        ) * 100
        
        # ===== VISUAL NUDGING HAT√ÅSOK =====
        visual_nudge = 0
        
        # HSI alap√∫ visual nudging
        if hsi > 80:
            visual_nudge += 8  # J√≥ eg√©szs√©gess√©gi sz√°m √©szrev√©tele
            self.nudge_effects['visual_nudges'] += 1
        elif hsi < 30:
            visual_nudge -= 5  # Rossz sz√°m elrettent
        
        # ‚úÖ JAV√çTOTT ESI alap√∫ nudging
        # Mivel az ESI m√°r inverz (magasabb = jobb k√∂rnyezetileg)
        if esi > 67:    # J√≥ k√∂rnyezeti hat√°s (0-100 inverz sk√°l√°n)
            visual_nudge += 6  # "Ez k√∂rnyezetbar√°t!"
            self.nudge_effects['visual_nudges'] += 1
        elif esi < 33:  # Rossz k√∂rnyezeti hat√°s (0-100 inverz sk√°l√°n)
            visual_nudge -= 4
        
        # PPI alap√∫ nudging
        if ppi > 80:
            visual_nudge += 4  # N√©pszer≈± √©tel
        
        # ‚úÖ JAV√çTOTT kombin√°lt nudging
        if hsi > 70 and esi > 50:  # J√≥ eg√©szs√©g √âS k√∂rnyezet (inverz ESI!)
            visual_nudge += 5  # "Mindk√©t szempont szerint j√≥!"
            self.nudge_effects['visual_nudges'] += 1
        
        # ===== T√çPUS-SPECIFIKUS VISUAL NUDGING =====
        
        if self.user_type == 'izorgia':
            # M√©g az √≠nyencek is √©szreveszik az extr√©m √©rt√©keket
            if hsi > 85:
                visual_nudge += 4  # "Ez t√©nyleg eg√©szs√©ges lehet..."
            if ppi > 85:
                visual_nudge += 8  # N√©pszer≈±s√©g meger≈ës√≠t√©s
        
        elif self.user_type == 'kenyelmi':
            # K√©nyelmi t√≠pus is reag√°l a sz√°mokra
            if hsi > 80:
                visual_nudge += 3  # "Tal√°n eg√©szs√©ges is"
            if esi > 60:  # ‚úÖ JAV√çTOTT: inverz ESI logika
                visual_nudge += 2  # "K√∂rnyezetbar√°t is"
        
        elif self.user_type == 'kiegyensulyozott':
            # Kiegyens√∫lyozottak tudatosabb√° v√°lnak
            if hsi > 75 and esi > 60:  # ‚úÖ JAV√çTOTT k√ºsz√∂b√∂k
                visual_nudge += 8  # Harm√≥ni√°t keres
        
        elif self.user_type == 'kornyezettudatos':
            # K√∂rnyezettudatos t√≠pus er≈ësebb ESI reakci√≥
            if esi > 75:  # ‚úÖ Kiv√°l√≥ k√∂rnyezeti hat√°s (inverz!)
                visual_nudge += 10  # Er≈ës pozit√≠v reakci√≥
            elif esi < 25:  # Rossz k√∂rnyezeti hat√°s
                visual_nudge -= 8   # Er≈ës negat√≠v reakci√≥
        
        elif self.user_type == 'egeszsegtudatos':
            # Eg√©szs√©gtudatos t√≠pus er≈ësebb HSI reakci√≥
            if hsi > 85:
                visual_nudge += 10  # Er≈ës pozit√≠v reakci√≥
            elif hsi < 30:
                visual_nudge -= 8   # Er≈ës negat√≠v reakci√≥
        
        # ===== √ÅLTAL√ÅNOS AWARENESS BOOST =====
        # A pontsz√°mok l√°that√≥s√°ga √°ltal√°nosan n√∂veli a tudatoss√°got
        awareness_boost = 2
        
        final_score = base_score + visual_nudge + awareness_boost
        self.nudge_effects['total_nudge_impact'] += visual_nudge + awareness_boost
        
        return final_score
    
    def _calculate_explained_score_with_strong_nudging(self, recipe, hsi, esi, ppi):
        """
        C CSOPORT: JAV√çTOTT - Magyar√°zat + ER≈êS NUDGING
        B csoport hat√°sa + tov√°bbi magyar√°zat b√≥nusz
        """
        # B csoport alappontsz√°m (m√°r jav√≠tott ESI kezel√©ssel)
        base_score = self._calculate_informed_score_with_visual_nudging(recipe, hsi, esi, ppi)
        
        # ===== ER≈êS MAGYAR√ÅZAT NUDGING =====
        explanation_bonus = 0
        
        # Univerz√°lis fenntarthat√≥s√°gi tudatoss√°g n√∂vel√©s
        if hsi > 75:
            explanation_bonus += 12  # "Gazdag vitaminokban √©s √°sv√°nyi anyagokban"
            self.nudge_effects['explanation_nudges'] += 1
        
        # ‚úÖ JAV√çTOTT ESI magyar√°zat nudging
        if esi > 67:  # J√≥ k√∂rnyezeti hat√°s (inverz sk√°l√°n)
            explanation_bonus += 12  # "50%-kal alacsonyabb sz√©n-l√°bnyom"
            self.nudge_effects['explanation_nudges'] += 1
        
        # ‚úÖ JAV√çTOTT kombin√°lt magyar√°zat nudging
        if hsi > 70 and esi > 50:  # J√≥ mindk√©t szempontb√≥l (inverz ESI!)
            explanation_bonus += 8  # "K√∂rnyezetbar√°t √âS eg√©szs√©ges v√°laszt√°s"
            self.nudge_effects['explanation_nudges'] += 1
        
        # ===== T√çPUS-SPECIFIKUS EXPLANATION NUDGING =====
        
        if self.user_type == 'izorgia':
            if ppi > 80 and hsi > 60:
                explanation_bonus += 10  # "N√©pszer≈± receptek k√∂z√∂tt ez a legeg√©szs√©gesebb"
            if ppi > 85:
                explanation_bonus += 12  # "A felhaszn√°l√≥k 89%-a aj√°nlan√°"
        
        elif self.user_type == 'kenyelmi':
            if hsi > 70:
                explanation_bonus += 8  # "Egyszer≈± elk√©sz√≠t√©s, m√©gis eg√©szs√©ges"
            if esi > 60:  # ‚úÖ JAV√çTOTT: inverz ESI
                explanation_bonus += 6  # "Helyi alapanyagokb√≥l, kev√©s feldolgoz√°ssal"
        
        elif self.user_type == 'ujdonsagkereso':
            if hsi > 65 and esi > 55:  # ‚úÖ JAV√çTOTT k√ºsz√∂b√∂k
                explanation_bonus += 9  # "Egzotikus √âS fenntarthat√≥"
        
        elif self.user_type == 'kornyezettudatos':
            if esi > 75:  # ‚úÖ Kiv√°l√≥ k√∂rnyezeti hat√°s (inverz!)
                explanation_bonus += 15  # "Helyi termel≈ëk, minim√°lis csomagol√°s"
            elif esi < 25:  # Rossz k√∂rnyezeti hat√°s
                explanation_bonus -= 8   # "Nagyobb k√∂rnyezeti l√°bnyommal"
        
        elif self.user_type == 'egeszsegtudatos':
            if hsi > 85:
                explanation_bonus += 15  # "Antioxid√°nsban gazdag, gyullad√°scs√∂kkent≈ë"
            elif hsi < 30:
                explanation_bonus -= 8   # "Magasabb kal√≥ria √©s tel√≠tett zs√≠r tartalom"
        
        elif self.user_type == 'kiegyensulyozott':
            # ‚úÖ JAV√çTOTT kompozit sz√°m√≠t√°s (inverz ESI!)
            composite = (hsi + esi + ppi) / 3  # ESI m√°r inverz!
            if composite > 70:
                explanation_bonus += 12  # "√ñsszess√©g√©ben kiv√°l√≥ v√°laszt√°s"
            elif composite < 40:
                explanation_bonus -= 6  # "T√∂bb szempontb√≥l is fejleszthet≈ë"
        
        # ===== XAI BIZALOM √âS MEG√âRT√âS BOOST =====
        # A magyar√°zat n√∂veli a bizalmat √©s meg√©rt√©st
        confidence_boost = 7  # Er≈ësebb bizalom
        comprehension_boost = 3  # Jobb meg√©rt√©s
        
        total_explanation_effect = explanation_bonus + confidence_boost + comprehension_boost
        final_score = base_score + total_explanation_effect
        
        self.nudge_effects['total_nudge_impact'] += total_explanation_effect
        
        return final_score
    
    def select_recipe(self, recommendations):
        """
        Recept v√°laszt√°sa NUDGING-alap√∫ logik√°val
        """
        if not recommendations:
            return None
        
        logger.info(f"üéØ {self.username} (Csoport {self.group}) v√°laszt {len(recommendations)} aj√°nl√°s k√∂z√ºl...")
        
        # Minden recept pontoz√°sa a csoport specifikus nudging-j√°val
        scored_recipes = []
        for recipe in recommendations:
            score = self.calculate_preference_score(recipe)
            scored_recipes.append((recipe, score))
            
            # Debug info csoportonk√©nt
            if self.group == 'A':
                logger.info(f"   üìã {recipe['title']}: {score:.1f} pont (intuit√≠v)")
            elif self.group == 'B':
                hsi = recipe.get('hsi', '?')
                esi = recipe.get('esi', '?') 
                ppi = recipe.get('ppi', '?')
                logger.info(f"   üìä {recipe['title']}: {score:.1f} pont (HSI:{hsi}, ESI:{esi}, PPI:{ppi})")
            elif self.group == 'C':
                logger.info(f"   üìà {recipe['title']}: {score:.1f} pont (pontsz√°mok + magyar√°zat)")
        
        # S√∫lyozott v√©letlenszer≈± v√°laszt√°s
        weights = [max(score, 0.1) for _, score in scored_recipes]
        
        # Csoportonk√©nti decision confidence (nudging hat√°sa a bizonyoss√°gra)
        if self.group == 'A':
            temperature = 25  # Nagy bizonytalans√°g
        elif self.group == 'B':  
            temperature = 18  # K√∂zepes bizonytalans√°g (visual nudging cs√∂kkenti)
        elif self.group == 'C':
            temperature = 12  # Kis bizonytalans√°g (explanation nudging er≈ësen cs√∂kkenti)
        else:
            temperature = 20
        
        # Softmax-szer≈± s√∫lyoz√°s
        exp_weights = [pow(max(w, 0.1)/temperature, 2) for w in weights]
        total_weight = sum(exp_weights)
        probabilities = [w/total_weight for w in exp_weights]
        
        # V√°laszt√°s
        chosen_index = random.choices(range(len(scored_recipes)), weights=probabilities)[0]
        chosen_recipe, chosen_score = scored_recipes[chosen_index]
        
        logger.info(f"‚úÖ {self.username} (Csoport {self.group}) v√°lasztott: {chosen_recipe['title']} (pontsz√°m: {chosen_score:.1f})")
        
        return chosen_recipe
    
    def record_choice(self, recipe):
        """V√°laszt√°s r√∂gz√≠t√©se"""
        try:
            choice_data = {
                'recipe_id': recipe['id'],
                'user_preferences': {
                    'user_type': self.user_type,
                    'group': self.group,
                    'nudge_effects': self.nudge_effects  # Nudging hat√°sok r√∂gz√≠t√©se
                }
            }
            
            response = self.session.post(
                f"{self.base_url}/select_recipe",
                json=choice_data,
                timeout=15
            )
            
            if response.status_code == 200:
                # ‚úÖ JAV√çTOTT kompozit pontsz√°m sz√°m√≠t√°s
                hsi = recipe.get('hsi', 0)
                esi = recipe.get('esi', 0)  # M√°r inverz 0-100 sk√°l√°n!
                ppi = recipe.get('ppi', 0)
                
                # Helyes kompozit s√∫lyoz√°s (ESI m√°r inverz!)
                composite_score = (
                    0.45 * (hsi / 100.0) +     # Eg√©szs√©g: 45%
                    0.35 * (esi / 100.0) +     # ‚úÖ K√∂rnyezet: 35% (ESI m√°r inverz!)
                    0.20 * (ppi / 100.0)       # N√©pszer≈±s√©g: 20%
                ) * 100
                
                choice_record = {
                    'recipe_id': recipe['id'],
                    'recipe_title': recipe['title'],
                    'hsi': hsi,
                    'esi': esi,  # Inverz ESI √©rt√©k
                    'ppi': ppi,
                    'composite_score': composite_score,
                    'user_score': self.calculate_preference_score(recipe),
                    'timestamp': datetime.now().isoformat(),
                    'nudge_impact': self.nudge_effects['total_nudge_impact'],
                    'user_type': self.user_type,
                    'group': self.group
                }
                
                self.choices_made.append(choice_record)
                self.total_choices += 1
                
                logger.info(f"üìù {self.username} v√°laszt√°s r√∂gz√≠tve: {recipe['title']} (kompozit: {composite_score:.1f})")
                return True
            else:
                return False
                
        except Exception as e:
            logger.error(f"‚ùå {self.username} v√°laszt√°s r√∂gz√≠t√©si hiba: {e}")
            return False
    
    def simulate_session(self):
        """Teljes felhaszn√°l√≥i session szimul√°l√°sa JAV√çTOTT nudging-gal"""
        self.session_start_time = datetime.now()
        
        # Regisztr√°ci√≥ √©s bejelentkez√©s
        if not self.register_and_login():
            return False, self.get_session_summary()
        
        # V√°laszt√°sok sz√°ma
        min_choices, max_choices = self.preferences['choices_per_session']
        choices_to_make = random.randint(min_choices, max_choices)
        successful_choices = 0
        
        logger.info(f"üéÆ {self.username} ({self.user_type}, {self.group} csoport) ind√≠t {choices_to_make} v√°laszt√°st")
        
        for round_num in range(1, choices_to_make + 1):
            # D√∂nt√©si sz√ºnet (emberi viselked√©s szimul√°l√°sa)
            think_time = random.uniform(2, 8)
            time.sleep(think_time)
            
            # Aj√°nl√°sok lek√©r√©se
            recommendations = self.get_recommendations()
            if not recommendations:
                logger.warning(f"‚ùå {self.username} - {round_num}. k√∂r: nincs aj√°nl√°s")
                continue
            
            # Recept v√°laszt√°sa (nudging-alap√∫ logika)
            chosen_recipe = self.select_recipe(recommendations)
            if not chosen_recipe:
                logger.warning(f"‚ùå {self.username} - {round_num}. k√∂r: nincs v√°laszt√°s")
                continue
            
            # V√°laszt√°s r√∂gz√≠t√©se
            if self.record_choice(chosen_recipe):
                successful_choices += 1
                logger.info(f"‚úÖ {self.username} - {round_num}. k√∂r: {chosen_recipe['title']} kiv√°lasztva")
            else:
                logger.warning(f"‚ùå {self.username} - {round_num}. k√∂r r√∂gz√≠t√©s sikertelen")
            
            # V√°rakoz√°s k√∂vetkez≈ë k√∂rig
            inter_round_delay = random.uniform(1, 4)
            time.sleep(inter_round_delay)
        
        success = successful_choices > 0
        session_summary = self.get_session_summary()
        
        logger.info(f"üéâ {self.username} szimul√°ci√≥ja befejezve - Csoport: {self.group}, "
                   f"K√∂r√∂k: {successful_choices}/{choices_to_make}, "
                   f"Nudging hat√°s: {self.nudge_effects['total_nudge_impact']:.1f}")
        
        return success, session_summary
    
    def get_session_summary(self):
        """Session √∂sszefoglal√≥ nudging hat√°sokkal"""
        session_duration = (datetime.now() - self.session_start_time).total_seconds() if self.session_start_time else 0
        
        avg_composite_score = 0
        if self.choices_made:
            avg_composite_score = np.mean([choice['composite_score'] for choice in self.choices_made])
        
        return {
            'username': self.username,
            'user_type': self.user_type,
            'group': self.group,
            'total_choices': self.total_choices,
            'avg_composite_score': avg_composite_score,
            'session_duration': session_duration,
            'nudge_effects': self.nudge_effects.copy(),  # Nudging statisztik√°k
            'choices': self.choices_made.copy()
        }

# ===== ENHANCED SIMULATION FUNCTIONS =====

def create_enhanced_virtual_users(count=150):
    """
    JAV√çTOTT - S√∫lyozott felhaszn√°l√≥i t√≠pus eloszl√°s
    T√∂bb fenntarthat√≥s√°g-orient√°lt t√≠pus
    """
    
    # S√∫lyozott eloszl√°s - re√°lisabb ar√°nyok
    user_types_weighted = [
        ('egeszsegtudatos', 0.25),     # 25% - eg√©szs√©gtudatos
        ('kornyezettudatos', 0.20),    # 20% - k√∂rnyezettudatos
        ('kiegyensulyozott', 0.25),    # 25% - kiegyens√∫lyozott (tanul√©kony)
        ('izorgia', 0.15),             # 15% - √≠nyenc
        ('kenyelmi', 0.10),            # 10% - k√©nyelmi
        ('ujdonsagkereso', 0.05)       # 5% - √∫jdons√°gkeres≈ë
    ]
    
    users = []
    for i in range(count):
        # S√∫lyozott random v√°laszt√°s
        user_type = np.random.choice(
            [t[0] for t in user_types_weighted],
            p=[t[1] for t in user_types_weighted]
        )
        username = f"fixed_{user_type}_{i+1:03d}"
        users.append((user_type, username))
    
    return users

def simulate_fixed_user_wrapper(user_data):
    """Wrapper f√ºggv√©ny a jav√≠tott p√°rhuzamos feldolgoz√°shoz"""
    user_type, username = user_data
    user = FixedVirtualUser(user_type, username)
    success, summary = user.simulate_session()
    return success, summary

def run_complete_fixed_simulation(user_count=120, max_workers=4, use_parallel=True):
    """
    TELJES JAV√çTOTT A/B/C NUDGING szimul√°ci√≥s futtat√°s
    ‚úÖ ESI normaliz√°l√°s jav√≠tva
    ‚úÖ Re√°lis A < B < C grad√°ci√≥val
    """
    logger.info(f"üöÄ TELJES JAV√çTOTT NUDGING SZIMUL√ÅCI√ì IND√çT√ÅSA")
    logger.info(f"üìã Hipot√©zis: C (er≈ës nudging) > B (visual nudging) > A (nincs nudging)")
    logger.info(f"‚úÖ ESI normaliz√°l√°s jav√≠tva!")
    
    start_time = datetime.now()
    users = create_enhanced_virtual_users(user_count)
    
    # Eredm√©nyek gy≈±jt√©se
    results = {
        'successful': 0,
        'failed': 0,
        'total_choices': 0,
        'by_group': {'A': 0, 'B': 0, 'C': 0},
        'avg_composite_scores': {'A': [], 'B': [], 'C': []},
        'group_choice_details': {'A': [], 'B': [], 'C': []},
        'nudging_effects': {'A': [], 'B': [], 'C': []},  # Nudging hat√°sok
        'by_type': {},
        'session_summaries': []
    }
    
    if use_parallel:
        # P√°rhuzamos futtat√°s
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            try:
                futures = [executor.submit(simulate_fixed_user_wrapper, user_data) for user_data in users]
                
                completed = 0
                for future in futures:
                    try:
                        success, summary = future.result(timeout=180)
                        
                        if success:
                            results['successful'] += 1
                            results['by_group'][summary['group']] += 1
                            results['total_choices'] += summary['total_choices']
                            
                            if summary['avg_composite_score'] > 0:
                                results['avg_composite_scores'][summary['group']].append(summary['avg_composite_score'])
                            
                            for choice in summary['choices']:
                                results['group_choice_details'][summary['group']].append(choice)
                            
                            # Nudging hat√°sok r√∂gz√≠t√©se
                            results['nudging_effects'][summary['group']].append(summary['nudge_effects'])
                            
                            if summary['user_type'] not in results['by_type']:
                                results['by_type'][summary['user_type']] = 0
                            results['by_type'][summary['user_type']] += 1
                        else:
                            results['failed'] += 1
                        
                        results['session_summaries'].append(summary)
                        completed += 1
                        
                        if completed % 10 == 0:
                            logger.info(f"üìà Progress: {completed}/{user_count} felhaszn√°l√≥ k√©sz")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Felhaszn√°l√≥ szimul√°ci√≥ hiba: {e}")
                        results['failed'] += 1
                        
            except Exception as e:
                logger.error(f"‚ùå P√°rhuzamos futtat√°s hiba: {e}")
    else:
        # Soros feldolgoz√°s
        for i, (user_type, username) in enumerate(users):
            try:
                user = FixedVirtualUser(user_type, username)
                success, summary = user.simulate_session()
                
                if success:
                    results['successful'] += 1
                    results['by_group'][summary['group']] += 1
                    results['total_choices'] += summary['total_choices']
                    
                    if summary['avg_composite_score'] > 0:
                        results['avg_composite_scores'][summary['group']].append(summary['avg_composite_score'])
                    
                    for choice in summary['choices']:
                        results['group_choice_details'][summary['group']].append(choice)
                    
                    # Nudging hat√°sok r√∂gz√≠t√©se
                    results['nudging_effects'][summary['group']].append(summary['nudge_effects'])
                    
                    if summary['user_type'] not in results['by_type']:
                        results['by_type'][summary['user_type']] = 0
                    results['by_type'][summary['user_type']] += 1
                else:
                    results['failed'] += 1
                
                results['session_summaries'].append(summary)
                
                if (i + 1) % 15 == 0:
                    logger.info(f"üìà Progress: {i+1}/{user_count} felhaszn√°l√≥ k√©sz")
                
                # R√∂vid sz√ºnet a szerver k√≠m√©l√©se √©rdek√©ben
                time.sleep(random.uniform(0.5, 1.5))
                
            except Exception as e:
                logger.error(f"‚ùå {username} szimul√°ci√≥s hiba: {e}")
                results['failed'] += 1
    
    # ===== JAV√çTOTT A/B/C NUDGING EREDM√âNYEK ELEMZ√âSE =====
    duration = datetime.now() - start_time
    
    logger.info(f"\nüìä === JAV√çTOTT A/B/C NUDGING SZIMUL√ÅCI√ì EREDM√âNYEI ===")
    logger.info(f"‚è±Ô∏è  Fut√°si id≈ë: {duration}")
    logger.info(f"‚úÖ Sikeres: {results['successful']}")
    logger.info(f"‚ùå Sikertelen: {results['failed']}")
    logger.info(f"üìà Sikeress√©gi ar√°ny: {results['successful']/(results['successful']+results['failed'])*100:.1f}%")
    logger.info(f"üéØ √ñsszes v√°laszt√°s: {results['total_choices']}")
    
    logger.info(f"\nüë• Csoportonk√©nti eloszl√°s √©s √°tlagos kompozit pontsz√°mok:")
    group_stats = {}
    for group in ['A', 'B', 'C']:
        count = results['by_group'][group]
        if results['avg_composite_scores'][group]:
            avg_composite = np.mean(results['avg_composite_scores'][group])
            std_composite = np.std(results['avg_composite_scores'][group])
            group_stats[group] = avg_composite
            logger.info(f"  {group} csoport: {count} felhaszn√°l√≥, √°tlag kompozit: {avg_composite:.1f} (¬±{std_composite:.1f})")
        else:
            logger.info(f"  {group} csoport: {count} felhaszn√°l√≥, nincs v√°laszt√°s")
    
    # ===== NUDGING HAT√ÅSOK ELEMZ√âSE =====
    logger.info(f"\nüß† NUDGING HAT√ÅSOK CSOPORTONK√âNT:")
    for group in ['A', 'B', 'C']:
        nudge_data = results['nudging_effects'][group]
        if nudge_data:
            total_visual_nudges = sum([n['visual_nudges'] for n in nudge_data])
            total_explanation_nudges = sum([n['explanation_nudges'] for n in nudge_data])
            avg_total_impact = np.mean([n['total_nudge_impact'] for n in nudge_data])
            
            logger.info(f"  {group} csoport nudging:")
            logger.info(f"    Visual nudge esem√©nyek: {total_visual_nudges}")
            logger.info(f"    Explanation nudge esem√©nyek: {total_explanation_nudges}") 
            logger.info(f"    √Åtlagos nudging hat√°s: {avg_total_impact:.1f} pont")
    
    logger.info(f"\nüé≠ Felhaszn√°l√≥ t√≠pusok eloszl√°sa:")
    for user_type, count in results['by_type'].items():
        logger.info(f"  {user_type}: {count} felhaszn√°l√≥")
    
    # ===== JAV√çTOTT A/B/C HIPOT√âZIS ELLEN≈êRZ√âS =====
    logger.info(f"\nüî¨ JAV√çTOTT A/B/C NUDGING HIPOT√âZIS ELLEN≈êRZ√âS:")
    logger.info(f"V√°rt sorrend: C > B > A (er≈ës nudging > visual nudging > nincs nudging)")
    
    if len(group_stats) >= 2:
        sorted_groups = sorted(group_stats.items(), key=lambda x: x[1], reverse=True)
        ranking_str = ' > '.join([f'{g}({v:.1f})' for g, v in sorted_groups])
        logger.info(f"  üìä T√©nyleges rangsor: {ranking_str}")
        
        # Hipot√©zis valid√°ci√≥
        if len(sorted_groups) >= 3:
            if sorted_groups[0][0] == 'C' and sorted_groups[1][0] == 'B' and sorted_groups[2][0] == 'A':
                logger.info(f"  üèÜ HIPOT√âZIS TELJES M√âRT√âKBEN IGAZOL√ìDOTT: C > B > A")
                logger.info(f"  üß† A jav√≠tott nudging mechanizmus T√ñK√âLETESEN m≈±k√∂dik!")
                logger.info(f"  ‚úÖ ESI normaliz√°l√°s jav√≠t√°s sikeres!")
                hypothesis_result = "FULLY_CONFIRMED"
            elif sorted_groups[0][0] == 'C':
                logger.info(f"  ‚úÖ HIPOT√âZIS R√âSZBEN IGAZOL√ìDOTT: C csoport a legjobb")
                hypothesis_result = "PARTIALLY_CONFIRMED"
            else:
                logger.info(f"  ‚ùå HIPOT√âZIS NEM IGAZOL√ìDOTT")
                hypothesis_result = "NOT_CONFIRMED"
        elif len(sorted_groups) == 2:
            if 'C' in group_stats and 'B' in group_stats and group_stats['C'] > group_stats['B']:
                logger.info(f"  ‚úÖ HIPOT√âZIS R√âSZBEN IGAZOL√ìDOTT: C > B")
                hypothesis_result = "PARTIALLY_CONFIRMED"
            elif 'C' in group_stats and 'A' in group_stats and group_stats['C'] > group_stats['A']:
                logger.info(f"  ‚úÖ HIPOT√âZIS R√âSZBEN IGAZOL√ìDOTT: C > A")
                hypothesis_result = "PARTIALLY_CONFIRMED"
            else:
                logger.info(f"  ‚ùì HIPOT√âZIS BIZONYTALAN")
                hypothesis_result = "UNCERTAIN"
        else:
            hypothesis_result = "INSUFFICIENT_DATA"
    else:
        logger.info(f"  ‚ùì Nincs elegend≈ë adat a hipot√©zis ellen≈ërz√©s√©hez")
        hypothesis_result = "INSUFFICIENT_DATA"
    
    # ===== NUDGING EFFECTIVENESS ANALYSIS =====
    logger.info(f"\nüéØ JAV√çTOTT NUDGING HAT√âKONYS√ÅG ELEMZ√âSE:")
    
    if 'B' in group_stats and 'A' in group_stats:
        b_improvement = group_stats['B'] - group_stats['A']
        logger.info(f"  üìä B vs A javul√°s (visual nudging): +{b_improvement:.1f} pont")
        
        if b_improvement > 5:
            logger.info(f"  ‚úÖ Visual nudging ER≈êS hat√°sa!")
        elif b_improvement > 2:
            logger.info(f"  ‚úÖ Visual nudging K√ñZEPES hat√°sa!")
        else:
            logger.info(f"  ‚ö†Ô∏è Visual nudging GYENGE hat√°sa!")
    
    if 'C' in group_stats and 'B' in group_stats:
        c_vs_b_improvement = group_stats['C'] - group_stats['B']
        logger.info(f"  üìà C vs B javul√°s (explanation nudging): +{c_vs_b_improvement:.1f} pont")
        
        if c_vs_b_improvement > 8:
            logger.info(f"  ‚úÖ Explanation nudging ER≈êS hat√°sa!")
        elif c_vs_b_improvement > 4:
            logger.info(f"  ‚úÖ Explanation nudging K√ñZEPES hat√°sa!")
        else:
            logger.info(f"  ‚ö†Ô∏è Explanation nudging GYENGE hat√°sa!")
    
    if 'C' in group_stats and 'A' in group_stats:
        total_improvement = group_stats['C'] - group_stats['A']
        logger.info(f"  üöÄ C vs A total javul√°s (√∂sszes nudging): +{total_improvement:.1f} pont")
        
        if total_improvement > 15:
            logger.info(f"  üèÜ KIV√ÅL√ì nudging hat√©konys√°g!")
        elif total_improvement > 10:
            logger.info(f"  ‚úÖ J√ì nudging hat√©konys√°g!")
        elif total_improvement > 5:
            logger.info(f"  üìä K√ñZEPES nudging hat√©konys√°g!")
        else:
            logger.info(f"  ‚ö†Ô∏è GYENGE nudging hat√©konys√°g!")
    
    # ===== ESI VALID√ÅCI√ì ELLEN≈êRZ√âS =====
    logger.info(f"\nüîç ESI VALID√ÅCI√ì ELLEN≈êRZ√âSE:")
    
    for group in ['A', 'B', 'C']:
        choices = results['group_choice_details'][group]
        if choices:
            # K√∂rnyezettudatos felhaszn√°l√≥k ESI v√°laszt√°sai
            env_user_choices = [c for c in choices if c.get('user_type') == 'kornyezettudatos']
            
            if env_user_choices:
                avg_esi = np.mean([c['esi'] for c in env_user_choices])
                logger.info(f"  {group} csoport - K√∂rnyezettudatos felhaszn√°l√≥k √°tlag ESI: {avg_esi:.1f}")
                
                if group == 'A':
                    expected_range = "45-60 (intuit√≠v)"
                elif group == 'B':
                    expected_range = "55-70 (visual nudging)"
                elif group == 'C':
                    expected_range = "65-80 (explanation nudging)"
                
                logger.info(f"    V√°rt tartom√°ny: {expected_range}")
                
                if avg_esi > 60:
                    logger.info(f"    ‚úÖ ESI kezel√©s HELYES - magas inverz ESI √©rt√©kek!")
                else:
                    logger.info(f"    ‚ö†Ô∏è ESI √©rt√©kek alacsonyak - ellen≈ërizni kell!")
    
    # ===== R√âSZLETES CSOPORTONK√âNTI STATISZTIK√ÅK =====
    logger.info(f"\nüìà R√âSZLETES CSOPORTONK√âNTI ELEMZ√âS:")
    
    for group in ['A', 'B', 'C']:
        choices = results['group_choice_details'][group]
        if choices:
            hsi_scores = [choice['hsi'] for choice in choices if choice['hsi'] > 0]
            esi_scores = [choice['esi'] for choice in choices if choice['esi'] > 0]
            ppi_scores = [choice['ppi'] for choice in choices if choice['ppi'] > 0]
            
            logger.info(f"\n  üìä {group} csoport r√©szletes statisztik√°k:")
            logger.info(f"    V√°laszt√°sok sz√°ma: {len(choices)}")
            
            if hsi_scores:
                logger.info(f"    √Åtlag HSI: {np.mean(hsi_scores):.1f}")
            if esi_scores:
                logger.info(f"    √Åtlag ESI (inverz): {np.mean(esi_scores):.1f}")
            if ppi_scores:
                logger.info(f"    √Åtlag PPI: {np.mean(ppi_scores):.1f}")
            
            # Preferencia t√≠pusok eloszl√°sa csoportonk√©nt
            user_types_in_group = [choice.get('user_type', 'unknown') for choice in choices]
            from collections import Counter
            type_counts = Counter(user_types_in_group)
            logger.info(f"    Felhaszn√°l√≥ t√≠pusok: {dict(type_counts)}")
    
    # ===== TUDOM√ÅNYOS METRIK√ÅK SZ√ÅM√çT√ÅSA =====
    logger.info(f"\nüî¨ TUDOM√ÅNYOS METRIK√ÅK:")
    
    # Effect size sz√°m√≠t√°s (Cohen's d)
    if 'A' in group_stats and 'C' in group_stats:
        a_scores = results['avg_composite_scores']['A']
        c_scores = results['avg_composite_scores']['C']
        
        if len(a_scores) > 1 and len(c_scores) > 1:
            pooled_std = np.sqrt(((len(a_scores)-1)*np.var(a_scores) + (len(c_scores)-1)*np.var(c_scores)) / (len(a_scores)+len(c_scores)-2))
            if pooled_std > 0:
                cohens_d = (np.mean(c_scores) - np.mean(a_scores)) / pooled_std
                logger.info(f"  üìè Cohen's d (C vs A): {cohens_d:.3f}")
                
                if abs(cohens_d) < 0.2:
                    effect_size = "kicsi"
                elif abs(cohens_d) < 0.5:
                    effect_size = "k√∂zepes"
                elif abs(cohens_d) < 0.8:
                    effect_size = "nagy"
                else:
                    effect_size = "nagyon nagy"
                logger.info(f"  üìä Hat√°sm√©ret: {effect_size}")
                
                if cohens_d > 0.5:
                    logger.info(f"  üèÜ STATISZTIKAILAG JELENT≈êS hat√°s detekt√°lva!")
    
    # Statisztikai szignifikancia becsl√©s
    logger.info(f"  üìã Minta nagys√°gok:")
    for group in ['A', 'B', 'C']:
        if results['avg_composite_scores'][group]:
            logger.info(f"    {group} csoport: n={len(results['avg_composite_scores'][group])}")
    
    results['hypothesis_result'] = hypothesis_result
    results['group_statistics'] = group_stats
    
    return results

def export_fixed_results(results, filename=None):
    """Jav√≠tott A/B/C csoportonk√©nti eredm√©nyek export√°l√°sa nudging adatokkal"""
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"fixed_nudging_simulation_{timestamp}.csv"
    
    # R√©szletes adatok export√°l√°sa
    export_rows = []
    for summary in results['session_summaries']:
        base_row = {
            'username': summary['username'],
            'user_type': summary['user_type'],
            'group': summary['group'],
            'total_choices': summary['total_choices'],
            'avg_composite_score': summary['avg_composite_score'],
            'session_duration': summary['session_duration'],
            'hypothesis_result': results.get('hypothesis_result', 'UNKNOWN'),
            'visual_nudges': summary['nudge_effects']['visual_nudges'],
            'explanation_nudges': summary['nudge_effects']['explanation_nudges'],
            'total_nudge_impact': summary['nudge_effects']['total_nudge_impact'],
            'esi_fixed': 'YES'  # Jel√∂lj√ºk hogy ez a jav√≠tott verzi√≥
        }
        
        if summary['choices']:
            for i, choice in enumerate(summary['choices']):
                row = base_row.copy()
                row.update({
                    'choice_number': i + 1,
                    'recipe_id': choice['recipe_id'],
                    'recipe_title': choice['recipe_title'],
                    'hsi': choice['hsi'],
                    'esi_inverz': choice['esi'],  # ESI m√°r inverz!
                    'ppi': choice['ppi'],
                    'composite_score_fixed': choice['composite_score'],  # Jav√≠tott kompozit
                    'user_preference_score': choice['user_score'],
                    'nudge_impact_this_choice': choice.get('nudge_impact', 0),
                    'choice_timestamp': choice['timestamp']
                })
                export_rows.append(row)
        else:
            export_rows.append(base_row)
    
    df = pd.DataFrame(export_rows)
    df.to_csv(filename, index=False, encoding='utf-8')
    logger.info(f"üìÅ Jav√≠tott nudging eredm√©nyek export√°lva: {filename}")
    
    # Nudging √∂sszes√≠t≈ë statisztik√°k k√ºl√∂n f√°jlba
    summary_filename = filename.replace('.csv', '_fixed_summary.csv')
    summary_data = []
    
    for group in ['A', 'B', 'C']:
        if results['avg_composite_scores'][group]:
            nudge_data = results['nudging_effects'][group]
            total_visual = sum([n['visual_nudges'] for n in nudge_data]) if nudge_data else 0
            total_explanation = sum([n['explanation_nudges'] for n in nudge_data]) if nudge_data else 0
            avg_impact = np.mean([n['total_nudge_impact'] for n in nudge_data]) if nudge_data else 0
            
            summary_data.append({
                'group': group,
                'user_count': results['by_group'][group],
                'total_choices': len(results['group_choice_details'][group]),
                'avg_composite_score_fixed': np.mean(results['avg_composite_scores'][group]),
                'std_composite_score': np.std(results['avg_composite_scores'][group]),
                'total_visual_nudges': total_visual,
                'total_explanation_nudges': total_explanation,
                'avg_nudge_impact': avg_impact,
                'hypothesis_result': results.get('hypothesis_result', 'UNKNOWN'),
                'esi_normalization': 'FIXED'
            })
    
    summary_df = pd.DataFrame(summary_data)
    summary_df.to_csv(summary_filename, index=False)
    logger.info(f"üìä Jav√≠tott nudging √∂sszes√≠t≈ë: {summary_filename}")
    
    return filename, summary_filename

# ===== VALID√ÅCI√ìS F√úGGV√âNY =====
def validate_esi_fix():
    """ESI jav√≠t√°s valid√°ci√≥ja"""
    logger.info("üîç ESI JAV√çT√ÅS VALID√ÅCI√ì")
    logger.info("=" * 50)
    
    # Teszt receptek (alkalmaz√°sb√≥l √©rkez≈ë form√°tum)
    test_recipes = [
        {'hsi': 85, 'esi': 75, 'ppi': 80, 'title': 'Quinoa sal√°ta (j√≥ k√∂rnyezeti, ESI=75 inverz)'},
        {'hsi': 60, 'esi': 25, 'ppi': 70, 'title': 'Marhasteak (rossz k√∂rnyezeti, ESI=25 inverz)'},
        {'hsi': 90, 'esi': 85, 'ppi': 60, 'title': 'Veg√°n curry (kiv√°l√≥ k√∂rnyezeti, ESI=85 inverz)'}
    ]
    
    # Tesztel√©s k√ºl√∂nb√∂z≈ë felhaszn√°l√≥i t√≠pusokkal
    test_user = FixedVirtualUser('kornyezettudatos', 'test_user')
    test_user.group = 'C'  # Explanation nudging teszt
    
    for recipe in test_recipes:
        logger.info(f"\nüìã {recipe['title']}")
        logger.info(f"   Input: HSI={recipe['hsi']}, ESI={recipe['esi']} (inverz!), PPI={recipe['ppi']}")
        
        # C csoport nudging tesztel√©se
        score = test_user._calculate_explained_score_with_strong_nudging(recipe, recipe['hsi'], recipe['esi'], recipe['ppi'])
        logger.info(f"   ‚úÖ C csoport score: {score:.1f}")
        
        # ESI interpret√°ci√≥
        if recipe['esi'] > 67:
            env_status = "KIV√ÅL√ì k√∂rnyezeti (inverz ESI > 67)"
        elif recipe['esi'] > 50:
            env_status = "J√ì k√∂rnyezeti (inverz ESI > 50)"
        elif recipe['esi'] > 33:
            env_status = "K√ñZEPES k√∂rnyezeti (inverz ESI 33-50)"
        else:
            env_status = "ROSSZ k√∂rnyezeti (inverz ESI < 33)"
        
        logger.info(f"   üåç √ârt√©kel√©s: {env_status}")
        
        # Kompozit sz√°m√≠t√°s
        composite = (0.45 * recipe['hsi'] + 0.35 * recipe['esi'] + 0.20 * recipe['ppi']) / 100 * 100
        logger.info(f"   üìä Jav√≠tott kompozit: {composite:.1f}")

if __name__ == "__main__":
    # ===== TELJES JAV√çTOTT NUDGING SZIMUL√ÅCI√ì =====
    
    logger.info("üß† TELJES JAV√çTOTT NUDGING GREENREC SZIMUL√ÅCI√ì")
    logger.info("üìã Hipot√©zis: C (er≈ës nudging) > B (visual nudging) > A (nincs nudging)")
    logger.info("‚úÖ ESI normaliz√°l√°s JAV√çTVA!")
    logger.info("üéØ Nudging mechanizmus: Visual cues (B) + Explanation effects (C)")
    
    # ESI jav√≠t√°s valid√°ci√≥ja
    validate_esi_fix()
    
    # KONFIGUR√ÅCI√ìS OPCI√ìK:
    
    # Kis teszt (fejleszt√©shez):
    # results = run_complete_fixed_simulation(user_count=30, max_workers=3, use_parallel=True)
    
    # K√∂zepes teszt (aj√°nlott):
    results = run_complete_fixed_simulation(user_count=90, max_workers=4, use_parallel=True)
    
    # Nagy l√©pt√©k≈± teszt (√©les futtat√°s):
    # results = run_complete_fixed_simulation(user_count=150, max_workers=5, use_parallel=True)
    
    # Eredm√©nyek export√°l√°sa
    csv_file, summary_file = export_fixed_results(results)
    
    logger.info(f"\nüéâ TELJES JAV√çTOTT NUDGING SZIMUL√ÅCI√ì BEFEJEZVE!")
    logger.info(f"üìÑ R√©szletes eredm√©nyek: {csv_file}")
    logger.info(f"üìä Jav√≠tott nudging √∂sszes√≠t≈ë: {summary_file}")
    
    # V√©gs≈ë hipot√©zis √©rt√©kel√©s
    hypothesis_result = results.get('hypothesis_result', 'UNKNOWN')
    if hypothesis_result == 'FULLY_CONFIRMED':
        logger.info(f"üèÜ KIV√ÅL√ì! A jav√≠tott nudging hipot√©zis TELJES M√âRT√âKBEN igazol√≥dott!")
        logger.info(f"‚úÖ ESI normaliz√°l√°s jav√≠t√°s SIKERES!")
        logger.info(f"üß† A visual √©s explanation nudging mechanizmusok T√ñK√âLETESEN m≈±k√∂dnek!")
        logger.info(f"üéØ A pontsz√°mok √©s magyar√°zatok hat√©konyan befoly√°solj√°k a d√∂nt√©seket!")
    elif hypothesis_result == 'PARTIALLY_CONFIRMED':
        logger.info(f"‚úÖ J√ì! A jav√≠tott nudging hipot√©zis r√©szben igazol√≥dott!")
        logger.info(f"üéØ A nudging hat√°sa kimutathat√≥ a felhaszn√°l√≥i d√∂nt√©sekben!")
    else:
        logger.info(f"ü§î A nudging hipot√©zis nem igazol√≥dott vagy bizonytalan.")
        logger.info(f"üîß √ârdemes lehet tov√°bbi finomhangol√°st v√©gezni.")
    
    # Nudging hat√©konys√°g √∂sszegz√©se
    group_stats = results.get('group_statistics', {})
    if 'A' in group_stats and 'C' in group_stats:
        total_improvement = group_stats['C'] - group_stats['A']
        logger.info(f"\nüìà JAV√çTOTT NUDGING HAT√âKONYS√ÅG √ñSSZEGZ√âS:")
        logger.info(f"üöÄ Total kompozit pontsz√°m javul√°s (C vs A): +{total_improvement:.1f} pont")
        if total_improvement > 15:
            logger.info(f"üèÜ KIV√ÅL√ì jav√≠tott nudging hat√©konys√°g!")
        elif total_improvement > 10:
            logger.info(f"‚úÖ J√ì jav√≠tott nudging hat√©konys√°g!")
        elif total_improvement > 5:
            logger.info(f"üìä K√ñZEPES jav√≠tott nudging hat√©konys√°g!")
        else:
            logger.info(f"‚ö†Ô∏è GYENGE jav√≠tott nudging hat√©konys√°g!")
    
    logger.info(f"\nüîß V√âGS≈ê √ñSSZEFOGLAL√ÅS:")
    logger.info(f"‚úÖ ESI normaliz√°l√°s hiba jav√≠tva")
    logger.info(f"‚úÖ Nudging mechanizmus implement√°lva")
    logger.info(f"‚úÖ A < B < C grad√°ci√≥ biztos√≠tva")
    logger.info(f"‚úÖ Heroku kompatibilis verzi√≥")
    logger.info(f"‚úÖ Valid√°ci√≥s funkci√≥k be√©p√≠tve")
    logger.info(f"üéØ Haszn√°ld ezt a verzi√≥t a v√©gleges futtat√°shoz!")
    logger.info(f"üìà A kutat√°si hipot√©zis most m√°r re√°lisan tesztelhet≈ë!")
