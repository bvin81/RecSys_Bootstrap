# config.py - GreenRec K√∂zponti Konfigur√°ci√≥
"""
GreenRec Konfigur√°ci√≥
====================
K√∂zponti konfigur√°ci√≥ minden modul sz√°m√°ra.
Environment-specific be√°ll√≠t√°sok √©s konstansok.
"""

import os
from datetime import timedelta

class Config:
    """Alap konfigur√°ci√≥ oszt√°ly"""
    
    # Flask alapbe√°ll√≠t√°sok
    SECRET_KEY = os.environ.get('SECRET_KEY', 'greenrec-dev-secret-key-change-in-production')
    DEBUG = os.environ.get('FLASK_ENV') == 'development'
    
    # Session konfigur√°ci√≥
    PERMANENT_SESSION_LIFETIME = timedelta(hours=24)
    SESSION_COOKIE_SECURE = os.environ.get('FLASK_ENV') == 'production'
    SESSION_COOKIE_HTTPONLY = True
    
    # Adatb√°zis konfigur√°ci√≥
    DATABASE_URL = os.environ.get('DATABASE_URL')
    if DATABASE_URL and DATABASE_URL.startswith('postgres://'):
        DATABASE_URL = DATABASE_URL.replace('postgres://', 'postgresql://', 1)
    
    # ‚úÖ GREENREC SPECIFIKUS BE√ÅLL√çT√ÅSOK
    
    # Tanul√°si rendszer
    MAX_LEARNING_ROUNDS = 3              # ‚úÖ 3 k√∂r (5 helyett)
    RECOMMENDATION_COUNT = 5             # ‚úÖ 5 recept/k√∂r (Precision@5)
    RELEVANCE_THRESHOLD = 4              # Rating >= 4 = relev√°ns
    
    # A/B/C teszt konfigur√°ci√≥
    GROUP_ALGORITHMS = {
        'A': 'content_based_hidden',     # ‚úÖ Rejtett pontsz√°mok
        'B': 'score_enhanced',          # Pontsz√°mok l√°that√≥k
        'C': 'hybrid_xai'               # Hibrid + magyar√°zatok
    }
    
    # Pontsz√°m s√∫lyoz√°s (ESI inverz normaliz√°l√°s)
    SCORE_WEIGHTS = {
        'ESI': 0.4,    # K√∂rnyezeti hat√°s (inverz: 100-ESI)
        'HSI': 0.4,    # Eg√©szs√©g√ºgyi √©rt√©k
        'PPI': 0.2     # N√©pszer≈±s√©g
    }
    
    # TF-IDF be√°ll√≠t√°sok
    TFIDF_MAX_FEATURES = 1000
    TFIDF_NGRAM_RANGE = (1, 2)
    
    # Adatf√°jlok
    DATA_FILES = [
        'greenrec_dataset.json',
        'data/greenrec_dataset.json',
        'data/processed_recipes.csv',
        'hungarian_recipes_github.csv'
    ]
    
    # K√©pek konfigur√°ci√≥
    DEFAULT_RECIPE_IMAGE = 'https://via.placeholder.com/300x200/667eea/white?text=üçΩÔ∏è+Recept'
    IMAGE_PLACEHOLDER_BASE = 'https://picsum.photos/300/200?random='
    
    # Keres√©si be√°ll√≠t√°sok
    SEARCH_MIN_SIMILARITY = 0.1
    SEARCH_MAX_RESULTS = 15
    
    # Metrik√°k √©s analytics
    METRICS_CONFIG = {
        'precision_recall_k_values': [5, 10, 20],
        'diversity_features': ['category', 'ingredients', 'sustainability'],
        'cache_timeout': 300  # 5 perc
    }
    
    # Logging konfigur√°ci√≥
    LOG_LEVEL = 'INFO' if not DEBUG else 'DEBUG'
    LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # Rate limiting (ha sz√ºks√©ges)
    RATELIMIT_STORAGE_URL = os.environ.get('REDIS_URL', 'memory://')
    
    # File upload (ha k√©s≈ëbb sz√ºks√©ges)
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB
    
    # Cache konfigur√°ci√≥
    CACHE_TYPE = 'simple'
    CACHE_DEFAULT_TIMEOUT = 300

class DevelopmentConfig(Config):
    """Development k√∂rnyezet konfigur√°ci√≥"""
    DEBUG = True
    TESTING = False
    
    # Development-specific be√°ll√≠t√°sok
    LOG_LEVEL = 'DEBUG'
    SESSION_COOKIE_SECURE = False
    
    # Demo adatok haszn√°lata
    USE_DEMO_DATA = True

class ProductionConfig(Config):
    """Production k√∂rnyezet konfigur√°ci√≥"""
    DEBUG = False
    TESTING = False
    
    # Production-specific be√°ll√≠t√°sok
    LOG_LEVEL = 'WARNING'
    SESSION_COOKIE_SECURE = True
    
    # Biztons√°gi fejleszt√©sek
    WTF_CSRF_ENABLED = True
    
    # Cache √©s teljes√≠tm√©ny
    CACHE_TYPE = 'redis' if os.environ.get('REDIS_URL') else 'simple'

class TestingConfig(Config):
    """Testing k√∂rnyezet konfigur√°ci√≥"""
    TESTING = True
    DEBUG = True
    
    # Test-specific be√°ll√≠t√°sok
    WTF_CSRF_ENABLED = False
    LOGIN_DISABLED = True
    
    # In-memory cache tesztekhez
    CACHE_TYPE = 'null'

# Environment-based konfigur√°ci√≥ kiv√°laszt√°sa
config_by_name = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'testing': TestingConfig,
    'default': DevelopmentConfig
}

# Aktu√°lis konfigur√°ci√≥
current_config = config_by_name.get(
    os.environ.get('FLASK_ENV', 'development'),
    DevelopmentConfig
)

# Konfigur√°ci√≥ valid√°ci√≥
def validate_config():
    """Konfigur√°ci√≥ valid√°l√°sa"""
    errors = []
    
    # Secret key ellen≈ërz√©se production-ben
    if current_config == ProductionConfig:
        if Config.SECRET_KEY == 'greenrec-dev-secret-key-change-in-production':
            errors.append("‚ùå SECRET_KEY must be changed in production!")
    
    # S√∫lyok ellen≈ërz√©se
    total_weight = sum(Config.SCORE_WEIGHTS.values())
    if abs(total_weight - 1.0) > 0.001:
        errors.append(f"‚ùå Score weights must sum to 1.0, got {total_weight}")
    
    # Tanul√°si k√∂r√∂k ellen≈ërz√©se
    if Config.MAX_LEARNING_ROUNDS < 1 or Config.MAX_LEARNING_ROUNDS > 10:
        errors.append(f"‚ùå MAX_LEARNING_ROUNDS must be 1-10, got {Config.MAX_LEARNING_ROUNDS}")
    
    if errors:
        print("üîß Configuration Validation Errors:")
        for error in errors:
            print(f"  {error}")
        return False
    
    print("‚úÖ Configuration validation passed")
    return True

# Konfigur√°ci√≥ inform√°ci√≥k ki√≠r√°sa
def print_config_info():
    """Konfigur√°ci√≥ inform√°ci√≥k ki√≠r√°sa"""
    print(f"üîß Configuration: {current_config.__name__}")
    print(f"üå± Learning rounds: {Config.MAX_LEARNING_ROUNDS}")
    print(f"üìä Recommendations per round: {Config.RECOMMENDATION_COUNT}")
    print(f"üéØ A/B/C groups: {list(Config.GROUP_ALGORITHMS.keys())}")
    print(f"‚öñÔ∏è Score weights: ESI={Config.SCORE_WEIGHTS['ESI']}, HSI={Config.SCORE_WEIGHTS['HSI']}, PPI={Config.SCORE_WEIGHTS['PPI']}")

if __name__ == '__main__':
    # Konfigur√°ci√≥ tesztel√©se
    print("üîß GreenRec Configuration Test")
    print("=" * 40)
    print_config_info()
    validate_config()
