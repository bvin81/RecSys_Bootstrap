import os
import json
import pandas as pd
import psycopg2
from urllib.parse import urlparse
import logging

# Logging be√°ll√≠t√°sa
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_db_connection():
    """PostgreSQL kapcsolat l√©trehoz√°sa hibakezel√©ssel"""
    try:
        DATABASE_URL = os.environ.get('DATABASE_URL')
        if DATABASE_URL:
            # Heroku PostgreSQL URL jav√≠t√°sa
            if DATABASE_URL.startswith('postgres://'):
                DATABASE_URL = DATABASE_URL.replace('postgres://', 'postgresql://', 1)
                logger.info("‚úÖ Database URL jav√≠tva postgresql://-re")
            
            result = urlparse(DATABASE_URL)
            conn = psycopg2.connect(
                dbname=result.path[1:],
                user=result.username,
                password=result.password,
                host=result.hostname,
                port=result.port,
                sslmode='require'
            )
            logger.info("‚úÖ PostgreSQL kapcsolat l√©trehozva (Heroku)")
            return conn
        else:
            # Helyi fejleszt√©s
            conn = psycopg2.connect(
                host="localhost",
                database="greenrec_local",
                user="postgres",
                password="password"
            )
            logger.info("‚úÖ PostgreSQL kapcsolat l√©trehozva (helyi)")
            return conn
    except Exception as e:
        logger.error(f"‚ùå Adatb√°zis kapcsolat hiba: {e}")
        raise

def create_tables():
    """Adatb√°zis t√°bl√°k l√©trehoz√°sa hibakezel√©ssel"""
    logger.info("üîß Adatb√°zis t√°bl√°k l√©trehoz√°sa...")
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # 1. El≈ësz√∂r t√∂r√∂lj√ºk a f√ºgg≈ë t√°bl√°kat ha l√©teznek
        cur.execute("DROP TABLE IF EXISTS user_interactions CASCADE;")
        cur.execute("DROP TABLE IF EXISTS user_choices CASCADE;")
        cur.execute("DROP TABLE IF EXISTS users CASCADE;")
        cur.execute("DROP TABLE IF EXISTS recipes CASCADE;")
        logger.info("üóëÔ∏è  R√©gi t√°bl√°k t√∂r√∂lve")
        
        # 2. Users t√°bla l√©trehoz√°sa
        cur.execute("""
            CREATE TABLE users (
                id SERIAL PRIMARY KEY,
                username VARCHAR(80) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                group_name CHAR(1) NOT NULL CHECK (group_name IN ('A','B','C')),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        logger.info("‚úÖ Users t√°bla l√©trehozva")
        
        # 3. Recipes t√°bla l√©trehoz√°sa
        cur.execute("""
            CREATE TABLE recipes (
                id INTEGER PRIMARY KEY,
                title TEXT NOT NULL,
                hsi FLOAT NOT NULL,
                esi FLOAT NOT NULL,
                ppi FLOAT NOT NULL,
                category VARCHAR(100),
                ingredients TEXT,
                instructions TEXT,
                images TEXT
            );
        """)
        logger.info("‚úÖ Recipes t√°bla l√©trehozva")
        
        # 4. User choices t√°bla l√©trehoz√°sa (foreign key-ekkel)
        cur.execute("""
            CREATE TABLE user_choices (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                recipe_id INTEGER REFERENCES recipes(id) ON DELETE CASCADE,
                selected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        logger.info("‚úÖ User_choices t√°bla l√©trehozva")
        
        # 5. User interactions t√°bla l√©trehoz√°sa (opcion√°lis)
        cur.execute("""
            CREATE TABLE user_interactions (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                recipe_id INTEGER REFERENCES recipes(id) ON DELETE CASCADE,
                action_type VARCHAR(50) NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        logger.info("‚úÖ User_interactions t√°bla l√©trehozva")
        
    except Exception as e:
        logger.error(f"‚ùå T√°bla l√©trehoz√°si hiba: {e}")
        # Ha hiba van, pr√≥b√°ljuk egyszer≈±bb m√≥don
        logger.info("üîÑ Egyszer≈±bb t√°bl√°k l√©trehoz√°sa foreign key-ek n√©lk√ºl...")
        
        # Fallback: t√°bl√°k foreign key-ek n√©lk√ºl
        cur.execute("DROP TABLE IF EXISTS user_interactions CASCADE;")
        cur.execute("DROP TABLE IF EXISTS user_choices CASCADE;")
        cur.execute("DROP TABLE IF EXISTS users CASCADE;")
        cur.execute("DROP TABLE IF EXISTS recipes CASCADE;")
        
        cur.execute("""
            CREATE TABLE users (
                id SERIAL PRIMARY KEY,
                username VARCHAR(80) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                group_name CHAR(1) NOT NULL CHECK (group_name IN ('A','B','C')),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        
        cur.execute("""
            CREATE TABLE recipes (
                id INTEGER PRIMARY KEY,
                title TEXT NOT NULL,
                hsi FLOAT NOT NULL,
                esi FLOAT NOT NULL,
                ppi FLOAT NOT NULL,
                category VARCHAR(100),
                ingredients TEXT,
                instructions TEXT,
                images TEXT
            );
        """)
        
        cur.execute("""
            CREATE TABLE user_choices (
                id SERIAL PRIMARY KEY,
                user_id INTEGER,
                recipe_id INTEGER,
                selected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        
        cur.execute("""
            CREATE TABLE user_interactions (
                id SERIAL PRIMARY KEY,
                user_id INTEGER,
                recipe_id INTEGER,
                action_type VARCHAR(50) NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        logger.info("‚úÖ Egyszer≈± t√°bl√°k l√©trehozva foreign key-ek n√©lk√ºl")
    
    # 6. Indexek l√©trehoz√°sa a teljes√≠tm√©ny√©rt
    try:
        cur.execute("CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_users_group ON users(group_name);")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_user_choices_user_id ON user_choices(user_id);")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_user_choices_recipe_id ON user_choices(recipe_id);")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_recipes_category ON recipes(category);")
        logger.info("‚úÖ Indexek l√©trehozva")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  Index l√©trehoz√°si figyelmeztet√©s: {e}")
    
    conn.commit()
    cur.close()
    conn.close()
    logger.info("‚úÖ Adatb√°zis t√°bl√°k l√©trehozva!")

def load_json_data(json_file_path):
    """JSON adatok bet√∂lt√©se √©s DataFrame-be konvert√°l√°sa"""
    try:
        logger.info(f"üìÅ JSON f√°jl beolvas√°sa: {json_file_path}")
        
        # JSON f√°jl beolvas√°sa
        with open(json_file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        logger.info(f"üìä JSON bet√∂ltve, {len(data)} recept tal√°lhat√≥")
        
        # DataFrame l√©trehoz√°sa
        df = pd.DataFrame(data)
        
        # Oszlopnevek standardiz√°l√°sa √©s ellen≈ërz√©se
        logger.info(f"üìã El√©rhet≈ë oszlopok: {list(df.columns)}")
        
        # Oszlopnevek mapping a projektre jellemz≈ë nevek alapj√°n
        column_mapping = {
            'recipeid': 'id',
            'recipe_id': 'id', 
            'name': 'title',
            'recipe_name': 'title',
            'nutri_score': 'hsi',
            'nutrition_score': 'hsi',
            'health_score': 'hsi',
            'HSI': 'hsi',          # üî• √öJ
            'env_score': 'esi',
            'environment_score': 'esi',
            'environmental_score': 'esi',
            'ESI': 'esi',          # üî• √öJ
            'meal_score': 'ppi',
            'popularity_score': 'ppi',
            'pop_score': 'ppi',
            'PPI': 'ppi'           # üî• √öJ
        }
        
        # Oszlopnevek √°tnevez√©se ha sz√ºks√©ges
        for old_name, new_name in column_mapping.items():
            if old_name in df.columns:
                df = df.rename(columns={old_name: new_name})
                logger.info(f"üîÑ Oszlop √°tnevezve: {old_name} ‚Üí {new_name}")
        
        # Sz√ºks√©ges oszlopok ellen≈ërz√©se
        required_columns = ['id', 'title', 'hsi', 'esi', 'ppi']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            logger.error(f"‚ùå Hi√°nyz√≥ oszlopok: {missing_columns}")
            logger.info(f"üìã El√©rhet≈ë oszlopok: {list(df.columns)}")
            raise Exception(f"Hi√°nyz√≥ oszlopok: {missing_columns}")
        
        # Adatok tiszt√≠t√°sa
        original_count = len(df)
        df = df.dropna(subset=required_columns)
        logger.info(f"üßπ {original_count - len(df)} sor elt√°vol√≠tva (hi√°nyz√≥ adatok)")
        
        # T√≠puskonverzi√≥k
        df['id'] = pd.to_numeric(df['id'], errors='coerce')
        df['hsi'] = pd.to_numeric(df['hsi'], errors='coerce')
        df['esi'] = pd.to_numeric(df['esi'], errors='coerce')
        df['ppi'] = pd.to_numeric(df['ppi'], errors='coerce')
        
        # Tov√°bbi NaN-ek elt√°vol√≠t√°sa a konverzi√≥ ut√°n
        df = df.dropna(subset=['id', 'hsi', 'esi', 'ppi'])
        
        # Alap√©rtelmezett √©rt√©kek be√°ll√≠t√°sa hi√°nyz√≥ oszlopokhoz
        if 'category' not in df.columns:
            df['category'] = '√Åltal√°nos'
        if 'ingredients' not in df.columns:
            df['ingredients'] = 'Nem el√©rhet≈ë'
        if 'instructions' not in df.columns:
            df['instructions'] = 'Nem el√©rhet≈ë'
        if 'images' not in df.columns:
            df['images'] = 'https://via.placeholder.com/300x200?text=No+Image'
        
        # Hi√°nyz√≥ √©rt√©kek kezel√©se a nem k√∂telez≈ë oszlopokban
        df['category'] = df['category'].fillna('√Åltal√°nos')
        df['ingredients'] = df['ingredients'].fillna('Nem el√©rhet≈ë')
        df['instructions'] = df['instructions'].fillna('Nem el√©rhet≈ë')
        df['images'] = df['images'].fillna('https://via.placeholder.com/300x200?text=No+Image')
        
        logger.info(f"‚úÖ {len(df)} √©rv√©nyes recept el≈ëk√©sz√≠tve az adatb√°zis sz√°m√°ra")
        return df
        
    except FileNotFoundError:
        logger.error(f"‚ùå JSON f√°jl nem tal√°lhat√≥: {json_file_path}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå JSON dek√≥dol√°si hiba: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå JSON bet√∂lt√©si hiba: {e}")
        return None

def insert_recipes_to_db(df):
    """Receptek besz√∫r√°sa az adatb√°zisba"""
    try:
        logger.info(f"üíæ {len(df)} recept besz√∫r√°sa az adatb√°zisba...")
        conn = get_db_connection()
        cur = conn.cursor()
        
        # R√©gi receptek t√∂rl√©se
        cur.execute("DELETE FROM recipes;")
        logger.info("üóëÔ∏è  R√©gi receptek t√∂r√∂lve")
        
        # √öj receptek besz√∫r√°sa
        insert_count = 0
        for _, recipe in df.iterrows():
            try:
                cur.execute("""
                    INSERT INTO recipes (id, title, hsi, esi, ppi, category, ingredients, instructions, images)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        int(recipe['id']),
                        str(recipe['title'])[:255],  # Limit title length
                        float(recipe['hsi']),
                        float(recipe['esi']),
                        float(recipe['ppi']),
                        str(recipe['category'])[:100],  # Limit category length
                        str(recipe['ingredients']),
                        str(recipe['instructions']),
                        str(recipe['images'])
                    ))
                insert_count += 1
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  Recept besz√∫r√°si hiba (ID: {recipe.get('id', 'N/A')}): {e}")
                continue
        
        conn.commit()
        cur.close()
        conn.close()
        
        logger.info(f"‚úÖ {insert_count} recept sikeresen besz√∫rva az adatb√°zisba!")
        
    except Exception as e:
        logger.error(f"‚ùå Adatb√°zis besz√∫r√°si hiba: {e}")
        raise

def create_sample_data():
    """Minta adatok l√©trehoz√°sa ha nincs JSON f√°jl"""
    logger.info("üîß Minta adatok l√©trehoz√°sa...")
    
    sample_recipes = [
        {
            'id': 1,
            'title': 'Z√∂lds√©ges quinoa sal√°ta',
            'hsi': 85.5,
            'esi': 45.2,
            'ppi': 78.0,
            'category': 'Sal√°t√°k',
            'ingredients': 'quinoa, uborka, paradicsom, avok√°d√≥, citrom, ol√≠vaolaj',
            'instructions': 'F≈ëzd meg a quino√°t, v√°rd meg hogy kih≈±lj√∂n. V√°gd apr√≥ra a z√∂lds√©geket √©s keverd √∂ssze a quino√°val. Citroml√©vel √©s ol√≠vaolajjal √≠zes√≠tsd.',
            'images': 'https://via.placeholder.com/300x200?text=Quinoa+Salat'
        },
        {
            'id': 2,
            'title': 'Veg√°n chili sin carne',
            'hsi': 78.3,
            'esi': 38.7,
            'ppi': 82.5,
            'category': 'F≈ë√©telek',
            'ingredients': 'v√∂r√∂s bab, kukorica, paprika, hagyma, paradicsom, chili, k√∂m√©ny',
            'instructions': 'Dinszteld le a hagym√°t √©s paprik√°t. Add hozz√° a babot, kukoric√°t √©s paradicsomot. F≈±szerezd √©s f≈ëzd 20 percig.',
            'images': 'https://via.placeholder.com/300x200?text=Vegan+Chili'
        },
        {
            'id': 3,
            'title': 'Spen√≥tos lencse curry',
            'hsi': 82.7,
            'esi': 42.1,
            'ppi': 75.8,
            'category': 'F≈ë√©telek',
            'ingredients': 'v√∂r√∂s lencse, spen√≥t, k√≥kusztej, curry por, gy√∂mb√©r, fokhagyma',
            'instructions': 'F≈ëzd meg a lencs√©t. K√ºl√∂n serpeny≈ëben dinszteld meg a f≈±szereket, add hozz√° a spen√≥tot √©s k√≥kusztejet.',
            'images': 'https://via.placeholder.com/300x200?text=Lentil+Curry'
        },
        {
            'id': 4,
            'title': 'Mediterr√°n halfil√©',
            'hsi': 72.1,
            'esi': 65.3,
            'ppi': 88.9,
            'category': 'Hal',
            'ingredients': 't≈ëkehal fil√©, ol√≠vabogy√≥, paradicsom, oregano, citrom',
            'instructions': 'S√ºsd meg a halat, t√°lald mediterr√°n z√∂lds√©gekkel.',
            'images': 'https://via.placeholder.com/300x200?text=Fish+Mediterranean'
        },
        {
            'id': 5,
            'title': 'Avok√°d√≥s toast',
            'hsi': 68.4,
            'esi': 52.1,
            'ppi': 91.2,
            'category': 'Snackek',
            'ingredients': 'teljes ki≈ërl√©s≈± keny√©r, avok√°d√≥, lime, s√≥, bors',
            'instructions': 'Pir√≠tsd meg a kenyeret, t√∂rj r√° avok√°d√≥t √©s √≠zes√≠tsd.',
            'images': 'https://via.placeholder.com/300x200?text=Avocado+Toast'
        }
    ]
    
    df = pd.DataFrame(sample_recipes)
    insert_recipes_to_db(df)
    logger.info("‚úÖ Minta adatok l√©trehozva!")

def main():
    """F≈ë f√ºggv√©ny - adatb√°zis inicializ√°l√°s"""
    logger.info("üöÄ GreenRec adatb√°zis inicializ√°l√°s kezd≈ëdik...")
    
    try:
        # 1. T√°bl√°k l√©trehoz√°sa
        create_tables()
        
        # 2. JSON adatok bet√∂lt√©se
        json_file = 'greenrec_dataset.json'
        
        if os.path.exists(json_file):
            logger.info(f"üìÅ JSON f√°jl tal√°lhat√≥: {json_file}")
            df = load_json_data(json_file)
            if df is not None and len(df) > 0:
                insert_recipes_to_db(df)
                logger.info(f"üéâ Adatb√°zis sikeresen inicializ√°lva {len(df)} recepttel!")
            else:
                logger.warning("‚ùå JSON bet√∂lt√©s sikertelen, minta adatok l√©trehoz√°sa...")
                create_sample_data()
        else:
            logger.warning(f"‚ö†Ô∏è  JSON f√°jl nem tal√°lhat√≥: {json_file}")
            logger.info("üîß Minta adatok l√©trehoz√°sa...")
            create_sample_data()
        
        logger.info("‚úÖ Adatb√°zis inicializ√°l√°s befejezve!")
        
    except Exception as e:
        logger.error(f"‚ùå Kritikus hiba az inicializ√°l√°s sor√°n: {e}")
        raise

if __name__ == '__main__':
    main()
