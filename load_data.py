import os
import pandas as pd
import psycopg2
from urllib.parse import urlparse
from sklearn.preprocessing import MinMaxScaler

def get_db_connection():
    """PostgreSQL kapcsolat l√©trehoz√°sa"""
    DATABASE_URL = os.environ.get('DATABASE_URL')
    if DATABASE_URL:
        # Heroku k√∂rnyezet
        result = urlparse(DATABASE_URL)
        conn = psycopg2.connect(
            dbname=result.path[1:],
            user=result.username,
            password=result.password,
            host=result.hostname,
            port=result.port,
            sslmode='require'
        )
    else:
        # Helyi fejleszt√©s
        conn = psycopg2.connect(
            host="localhost",
            database="greenrec_local",
            user="postgres",
            password="password"
        )
    return conn

def create_tables():
    """Adatb√°zis t√°bl√°k l√©trehoz√°sa"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    # T√°bl√°k l√©trehoz√°sa
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(80) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            group_name CHAR(1) NOT NULL CHECK (group_name IN ('A','B','C')),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS recipes (
            id INTEGER PRIMARY KEY,
            title TEXT NOT NULL,
            hsi FLOAT NOT NULL,
            esi FLOAT NOT NULL,
            ppi FLOAT NOT NULL,
            category VARCHAR(100),
            ingredients TEXT,
            instructions TEXT,
            images TEXT
        );
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS user_choices (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
            recipe_id INTEGER REFERENCES recipes(id) ON DELETE CASCADE,
            chosen_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS user_interactions (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
            recipe_id INTEGER REFERENCES recipes(id) ON DELETE CASCADE,
            action_type VARCHAR(50) NOT NULL,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    
    # Indexek l√©trehoz√°sa
    cur.execute("CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);")
    cur.execute("CREATE INDEX IF NOT EXISTS idx_users_group ON users(group_name);")
    cur.execute("CREATE INDEX IF NOT EXISTS idx_user_choices_user_id ON user_choices(user_id);")
    cur.execute("CREATE INDEX IF NOT EXISTS idx_user_choices_recipe_id ON user_choices(recipe_id);")
    cur.execute("CREATE INDEX IF NOT EXISTS idx_user_interactions_user_id ON user_interactions(user_id);")
    cur.execute("CREATE INDEX IF NOT EXISTS idx_recipes_category ON recipes(category);")
    
    conn.commit()
    cur.close()
    conn.close()
    print("‚úÖ Adatb√°zis t√°bl√°k l√©trehozva!")

def load_csv_data(csv_file_path):
    """CSV adatok bet√∂lt√©se √©s el≈ëfeldolgoz√°sa"""
    try:
        # CSV beolvas√°sa
        print(f"üìÅ CSV beolvas√°sa: {csv_file_path}")
        
        # Pr√≥b√°ljuk k√ºl√∂nb√∂z≈ë encoding-okkal
        encodings = ['utf-8', 'latin-1', 'iso-8859-1', 'cp1252']
        df = None
        
        for encoding in encodings:
            try:
                df = pd.read_csv(csv_file_path, encoding=encoding)
                print(f"‚úÖ Sikeres beolvas√°s {encoding} encoding-gal")
                break
            except UnicodeDecodeError:
                continue
        
        if df is None:
            raise Exception("Nem siker√ºlt beolvasni a CSV f√°jlt")
        
        print(f"üìä Beolvasva {len(df)} recept")
        
        # Oszlopnevek standardiz√°l√°sa
        column_mapping = {
            'recipeid': 'id',
            'name': 'title',
            'nutri_score': 'hsi',
            'env_score': 'esi', 
            'meal_score': 'ppi'
        }
        
        df = df.rename(columns=column_mapping)
        
        # Sz√ºks√©ges oszlopok ellen≈ërz√©se
        required_columns = ['id', 'title', 'hsi', 'esi', 'ppi', 'ingredients']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise Exception(f"Hi√°nyz√≥ oszlopok: {missing_columns}")
        
        # Hi√°nyz√≥ adatok kezel√©se
        df = df.dropna(subset=['id', 'title', 'hsi', 'esi', 'ppi'])
        
        # Karakterek jav√≠t√°sa (opcion√°lis)
        df['title'] = df['title'].str.replace('?', '≈ë').str.replace('?', '≈±')
        df['ingredients'] = df['ingredients'].fillna('').str.replace('?', '≈ë').str.replace('?', '≈±')
        df['instructions'] = df['instructions'].fillna('').str.replace('?', '≈ë').str.replace('?', '≈±')
        
        # URL-ek jav√≠t√°sa
        if 'images' in df.columns:
            df['images'] = df['images'].str.replace('h?tps', 'https', regex=False)
        
        # Kateg√≥ria alap√©rtelmezett √©rt√©ke
        if 'category' not in df.columns:
            df['category'] = 'Egy√©b'
        
        df['category'] = df['category'].fillna('Egy√©b')
        
        print(f"‚úÖ Adatok el≈ëfeldolgozva, {len(df)} √©rv√©nyes recept")
        return df
        
    except Exception as e:
        print(f"‚ùå Hiba a CSV bet√∂lt√©se sor√°n: {e}")
        return None

def insert_recipes_to_db(df):
    """Receptek besz√∫r√°sa az adatb√°zisba"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Megl√©v≈ë receptek t√∂rl√©se
        cur.execute("DELETE FROM recipes;")
        
        # Receptek besz√∫r√°sa
        insert_query = """
            INSERT INTO recipes (id, title, hsi, esi, ppi, category, ingredients, instructions, images)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        
        records_inserted = 0
        for _, row in df.iterrows():
            try:
                cur.execute(insert_query, (
                    int(row['id']),
                    str(row['title'])[:500],  # Limit√°l√°s 500 karakterre
                    float(row['hsi']),
                    float(row['esi']),
                    float(row['ppi']),
                    str(row.get('category', 'Egy√©b'))[:100],
                    str(row.get('ingredients', ''))[:2000],
                    str(row.get('instructions', ''))[:5000],
                    str(row.get('images', ''))[:500]
                ))
                records_inserted += 1
            except Exception as e:
                print(f"‚ö†Ô∏è  Hiba a recept besz√∫r√°s√°n√°l (ID: {row.get('id', 'N/A')}): {e}")
                continue
        
        conn.commit()
        print(f"‚úÖ {records_inserted} recept sikeresen besz√∫rva az adatb√°zisba!")
        
    except Exception as e:
        print(f"‚ùå Hiba az adatb√°zis m≈±velet sor√°n: {e}")
        conn.rollback()
    finally:
        cur.close()
        conn.close()

def create_sample_data():
    """Minta adatok l√©trehoz√°sa tesztel√©shez"""
    sample_recipes = [
        {
            'id': 1,
            'title': 'Mediterr√°n Sal√°ta',
            'hsi': 85.5,
            'esi': 45.2,
            'ppi': 78.3,
            'category': 'Sal√°ta',
            'ingredients': 'paradicsom, uborka, ol√≠vabogy√≥, feta sajt, ol√≠vaolaj, citrom',
            'instructions': 'V√°gjuk fel a z√∂lds√©geket, keverj√ºk √∂ssze a feta sajttal √©s √∂nts√ºk le az ol√≠vaolajjal.',
            'images': 'https://example.com/mediterranean_salad.jpg'
        },
        {
            'id': 2,
            'title': 'Quinoa Buddha Bowl',
            'hsi': 92.1,
            'esi': 38.7,
            'ppi': 65.4,
            'category': 'Veg√°n',
            'ingredients': 'quinoa, √©desburgonya, spen√≥t, avok√°d√≥, csicseribors√≥, tahini',
            'instructions': 'F≈ëzz√ºk meg a quino√°t, s√ºss√ºk meg az √©desburgony√°t, t√°laljuk a z√∂lds√©gekkel.',
            'images': 'https://example.com/quinoa_bowl.jpg'
        },
        {
            'id': 3,
            'title': 'Csirkemell z√∂lds√©gekkel',
            'hsi': 76.8,
            'esi': 120.5,
            'ppi': 88.2,
            'category': 'H√∫s',
            'ingredients': 'csirkemell, brokkoli, s√°rgar√©pa, paprika, ol√≠vaolaj, fokhagyma',
            'instructions': 'S√ºss√ºk meg a csirkemellet, p√°roljuk a z√∂lds√©geket √©s t√°laljuk egy√ºtt.',
            'images': 'https://example.com/chicken_vegetables.jpg'
        }
    ]
    
    df = pd.DataFrame(sample_recipes)
    insert_recipes_to_db(df)
    print("‚úÖ Minta adatok l√©trehozva!")

def main():
    """F≈ë f√ºggv√©ny"""
    print("üöÄ GreenRec adatb√°zis inicializ√°l√°s kezd≈ëdik...")
    
    # 1. T√°bl√°k l√©trehoz√°sa
    create_tables()
    
    # 2. CSV adatok bet√∂lt√©se (ha l√©tezik)
    csv_file = 'greenrec_recipes.csv'  # Vagy az √°ltalad megadott f√°jln√©v
    
    if os.path.exists(csv_file):
        print(f"üìÅ CSV f√°jl tal√°lhat√≥: {csv_file}")
        df = load_csv_data(csv_file)
        if df is not None:
            insert_recipes_to_db(df)
        else:
            print("‚ùå CSV bet√∂lt√©s sikertelen, minta adatok l√©trehoz√°sa...")
            create_sample_data()
    else:
        print(f"‚ö†Ô∏è  CSV f√°jl nem tal√°lhat√≥: {csv_file}")
        print("üîß Minta adatok l√©trehoz√°sa...")
        create_sample_data()
    
    print("‚úÖ Adatb√°zis inicializ√°l√°s befejezve!")

if __name__ == '__main__':
    main()
