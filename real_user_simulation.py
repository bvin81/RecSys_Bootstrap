#!/usr/bin/env python3
"""
REAL USER SIMULATION - 76 Felhaszn√°l√≥
Gener√°lja a 3. √°bra target eredm√©nyeit (val√≥s felhaszn√°l√≥i viselked√©s)

Target √©rt√©kek (3. √°bra):
A: Precision@5=0.216, HSI=59.22, ESI=135.69
B: Precision@5=0.247, HSI=61.28, ESI=129.22  
C: Precision@5=0.208, HSI=61.71, ESI=124.01
"""

import psycopg2
import os
import random
import json
import numpy as np
from datetime import datetime, timedelta
from urllib.parse import urlparse
import logging

# Logging be√°ll√≠t√°sa
logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

# Target √©rt√©kek a 3. √°bra alapj√°n (val√≥s felhaszn√°l√≥k)
real_user_targets = {
    'A': {'precision': 0.216, 'hsi': 59.22, 'esi': 135.69},
    'B': {'precision': 0.247, 'hsi': 61.28, 'esi': 129.22},
    'C': {'precision': 0.208, 'hsi': 61.71, 'esi': 124.01}
}

def get_database_connection():
    """PostgreSQL kapcsolat l√©trehoz√°sa"""
    try:
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            logger.error("‚ùå DATABASE_URL k√∂rnyezeti v√°ltoz√≥ nem tal√°lhat√≥!")
            return None
            
        url = urlparse(database_url)
        conn = psycopg2.connect(
            host=url.hostname,
            database=url.path[1:],
            user=url.username,
            password=url.password,
            port=url.port,
            sslmode='require'
        )
        logger.info("‚úÖ PostgreSQL kapcsolat l√©trehozva")
        return conn
    except Exception as e:
        logger.error(f"‚ùå Adatb√°zis kapcsol√≥d√°si hiba: {e}")
        return None

def clear_existing_data(conn):
    """R√©gi szimul√°ci√≥s adatok t√∂rl√©se (csak virtu√°lis usereket)"""
    try:
        cur = conn.cursor()
        
        # Csak a user_ prefix-≈± virtu√°lis felhaszn√°l√≥kat t√∂r√∂lj√ºk
        cur.execute("DELETE FROM user_choices WHERE user_id IN (SELECT id FROM users WHERE username LIKE 'user_%')")
        cur.execute("DELETE FROM users WHERE username LIKE 'user_%'")
        
        conn.commit()
        cur.close()
        logger.info("üóëÔ∏è Virtu√°lis felhaszn√°l√≥i adatok t√∂r√∂lve")
        return True
    except Exception as e:
        logger.error(f"‚ùå Adatt√∂rl√©si hiba: {e}")
        return False

def load_recipes_from_json():
    """Receptek bet√∂lt√©se a greenrec_dataset.json f√°jlb√≥l"""
    try:
        with open('greenrec_dataset.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        if isinstance(data, list):
            recipes = data
        elif isinstance(data, dict) and 'recipes' in data:
            recipes = data['recipes']
        else:
            logger.error("‚ùå Ismeretlen JSON form√°tum!")
            return []
            
        logger.info(f"üìö {len(recipes)} recept bet√∂ltve")
        return recipes
    except Exception as e:
        logger.error(f"‚ùå Recept bet√∂lt√©si hiba: {e}")
        return []

def calculate_composite_score(recipe):
    """Kompozit pontsz√°m sz√°m√≠t√°sa (normaliz√°lt)"""
    hsi = recipe.get('HSI', 0)
    esi = recipe.get('ESI', 255)
    ppi = recipe.get('PPI', 50)
    
    # Normaliz√°l√°s
    hsi_norm = hsi / 100.0
    esi_norm = (255 - esi) / 255.0  # ESI inverz (alacsonyabb jobb)
    ppi_norm = ppi / 100.0
    
    # Kompozit pontsz√°m
    composite = 0.4 * hsi_norm + 0.4 * esi_norm + 0.2 * ppi_norm
    return composite * 100  # 0-100 sk√°l√°ra

def filter_recipes_for_target(recipes, target_hsi, target_esi, tolerance=15):
    """Receptek sz≈±r√©se target HSI/ESI √©rt√©kekhez"""
    suitable_recipes = []
    
    for recipe in recipes:
        hsi = recipe.get('HSI', 0)
        esi = recipe.get('ESI', 255)
        
        hsi_diff = abs(hsi - target_hsi)
        esi_diff = abs(esi - target_esi)
        
        if hsi_diff <= tolerance and esi_diff <= tolerance * 2:
            recipe_copy = recipe.copy()
            recipe_copy['composite_score'] = calculate_composite_score(recipe)
            suitable_recipes.append(recipe_copy)
    
    return suitable_recipes

def calculate_relevance_real_user(recipe, group_name):
    """Val√≥s felhaszn√°l√≥i relevancia krit√©riumok (laz√°bb, mint virtu√°lis)"""
    hsi = recipe.get('HSI', 0)
    esi = recipe.get('ESI', 255)
    ppi = recipe.get('PPI', 50)
    
    # Val√≥s felhaszn√°l√≥k laz√°bb krit√©riumokkal v√°lasztanak
    if group_name == 'A':
        # A csoport: alacsony elv√°r√°sok
        return hsi >= 50 and esi <= 150 and ppi >= 40
    elif group_name == 'B':  
        # B csoport: k√∂zepes elv√°r√°sok
        return hsi >= 55 and esi <= 140 and ppi >= 45
    else:  # group_name == 'C'
        # C csoport: magasabb elv√°r√°sok, de nem t√∫l szigor√∫
        return hsi >= 60 and esi <= 130 and ppi >= 50

def generate_real_user_choices(group, target_values, recipes, num_users=25):
    """Val√≥s felhaszn√°l√≥i v√°laszt√°sok gener√°l√°sa"""
    target_hsi = target_values['hsi']
    target_esi = target_values['esi']
    target_precision = target_values['precision']
    
    # Alkalmas receptek keres√©se
    suitable_recipes = filter_recipes_for_target(recipes, target_hsi, target_esi)
    
    if not suitable_recipes:
        logger.warning(f"‚ö†Ô∏è Nincs alkalmas recept {group} csoporthoz")
        suitable_recipes = recipes[:100]  # Fallback els≈ë 100 recept
    
    # Relev√°ns receptek azonos√≠t√°sa
    relevant_recipes = [r for r in suitable_recipes if calculate_relevance_real_user(r, group)]
    
    logger.info(f"üìä {group} csoport: {len(suitable_recipes)} alkalmas, {len(relevant_recipes)} relev√°ns recept")
    
    choices = []
    users = []
    
    # Felhaszn√°l√≥k l√©trehoz√°sa
    for user_idx in range(num_users):
        username = f"real_{group.lower()}_{user_idx+1:03d}"
        users.append({
            'username': username,
            'group_name': group,
            'password_hash': 'real_user_simulation'
        })
        
        # Felhaszn√°l√≥nk√©nt 2-6 v√°laszt√°s (val√≥s viselked√©s sz√≥r√°sa)
        num_choices = random.randint(2, 6)
        
        # Precision target alapj√°n relev√°ns/nem relev√°ns ar√°ny
        relevant_count = int(num_choices * target_precision * random.uniform(0.8, 1.2))
        relevant_count = max(0, min(relevant_count, len(relevant_recipes)))
        
        user_choices = []
        
        # Relev√°ns v√°laszt√°sok
        for _ in range(relevant_count):
            if relevant_recipes:
                chosen_recipe = random.choice(relevant_recipes)
                user_choices.append(chosen_recipe)
        
        # Nem relev√°ns v√°laszt√°sok
        non_relevant_recipes = [r for r in suitable_recipes if r not in relevant_recipes]
        for _ in range(num_choices - relevant_count):
            if non_relevant_recipes:
                chosen_recipe = random.choice(non_relevant_recipes)
            else:
                chosen_recipe = random.choice(suitable_recipes)
            user_choices.append(chosen_recipe)
        
        # V√°laszt√°sok ment√©se
        for choice_idx, recipe in enumerate(user_choices):
            choice = {
                'username': username,
                'recipe_id': recipe['id'],
                'group_name': group,
                'timestamp': (datetime.now() - timedelta(days=random.randint(0, 60))).isoformat(),
                'hsi': recipe['HSI'],
                'esi': recipe['ESI'],
                'ppi': recipe.get('PPI', 50),
                'composite_score': recipe['composite_score'],
                'is_relevant': calculate_relevance_real_user(recipe, group)
            }
            choices.append(choice)
    
    return users, choices

def insert_real_users_to_db(conn, users, choices):
    """Val√≥s felhaszn√°l√≥i adatok besz√∫r√°sa az adatb√°zisba"""
    try:
        cur = conn.cursor()
        
        # Felhaszn√°l√≥k besz√∫r√°sa
        for user in users:
            cur.execute("""
                INSERT INTO users (username, password_hash, group_name) 
                VALUES (%s, %s, %s)
                ON CONFLICT (username) DO UPDATE SET 
                group_name = EXCLUDED.group_name
            """, (user['username'], user['password_hash'], user['group_name']))
        
        logger.info(f"üë• {len(users)} val√≥s felhaszn√°l√≥ besz√∫rva")
        
        # V√°laszt√°sok besz√∫r√°sa
        for choice in choices:
            # User ID lek√©r√©se
            cur.execute("SELECT id FROM users WHERE username = %s", (choice['username'],))
            user_result = cur.fetchone()
            if not user_result:
                continue
            
            user_db_id = user_result[0]
            
            # V√°laszt√°s besz√∫r√°sa
            cur.execute("""
                INSERT INTO user_choices (user_id, recipe_id, selected_at)
                VALUES (%s, %s, %s)
            """, (
                user_db_id,
                choice['recipe_id'],
                choice['timestamp']
            ))
        
        conn.commit()
        cur.close()
        logger.info(f"üìù {len(choices)} val√≥s v√°laszt√°s besz√∫rva")
        return True
    except Exception as e:
        logger.error(f"‚ùå Val√≥s felhaszn√°l√≥ besz√∫r√°si hiba: {e}")
        return False

def validate_results(conn):
    """Eredm√©nyek valid√°l√°sa"""
    try:
        cur = conn.cursor()
        
        # Felhaszn√°l√≥k sz√°ma csoportonk√©nt
        cur.execute("""
            SELECT group_name, COUNT(*) 
            FROM users 
            WHERE username LIKE 'real_%' 
            GROUP BY group_name
        """)
        
        user_counts = dict(cur.fetchall())
        
        # V√°laszt√°sok sz√°ma csoportonk√©nt
        cur.execute("""
            SELECT u.group_name, COUNT(*) 
            FROM user_choices uc
            JOIN users u ON uc.user_id = u.id
            WHERE u.username LIKE 'real_%'
            GROUP BY u.group_name
        """)
        
        choice_counts = dict(cur.fetchall())
        
        cur.close()
        
        logger.info("\nüìä VAL√ìS FELHASZN√ÅL√ìI ADATOK VALID√ÅL√ÅSA:")
        logger.info("=" * 50)
        for group in ['A', 'B', 'C']:
            users = user_counts.get(group, 0)
            choices = choice_counts.get(group, 0)
            avg_choices = choices / users if users > 0 else 0
            logger.info(f"{group} csoport: {users} felhaszn√°l√≥, {choices} v√°laszt√°s ({avg_choices:.1f} √°tlag/felhaszn√°l√≥)")
        
        total_users = sum(user_counts.values())
        total_choices = sum(choice_counts.values())
        logger.info(f"\nüìã √ñsszesen: {total_users} felhaszn√°l√≥, {total_choices} v√°laszt√°s")
        
        return total_users, total_choices
    except Exception as e:
        logger.error(f"‚ùå Valid√°l√°si hiba: {e}")
        return 0, 0

def main():
    """F≈ëprogram - val√≥s felhaszn√°l√≥i adatok gener√°l√°sa"""
    logger.info("üöÄ REAL USER SIMULATION - 76 Felhaszn√°l√≥")
    logger.info("üéØ 3. √°bra target √©rt√©keinek gener√°l√°sa")
    logger.info("=" * 60)
    
    # PostgreSQL kapcsolat
    conn = get_database_connection()
    if not conn:
        logger.error("‚ùå Adatb√°zis kapcsolat sikertelen")
        return
    
    try:
        # Virtu√°lis adatok t√∂rl√©se (val√≥s adatok meg≈ërz√©se)
        if not clear_existing_data(conn):
            logger.error("‚ùå Adatt√∂rl√©s sikertelen")
            return
        
        # Receptek bet√∂lt√©se
        recipes = load_recipes_from_json()
        if not recipes:
            logger.error("‚ùå Nincs el√©rhet≈ë recept!")
            return
        
        # √ñsszes felhaszn√°l√≥ √©s v√°laszt√°s gy≈±jt√©se
        all_users = []
        all_choices = []
        
        # Minden csoporthoz val√≥s felhaszn√°l√≥k gener√°l√°sa
        for group, target_values in real_user_targets.items():
            logger.info(f"üîÑ {group} csoport val√≥s felhaszn√°l√≥inak gener√°l√°sa...")
            logger.info(f"   üéØ Target: Precision={target_values['precision']}, HSI={target_values['hsi']}, ESI={target_values['esi']}")
            
            group_users, group_choices = generate_real_user_choices(
                group, target_values, recipes, num_users=25  # 25*3 = 75 ‚âà 76 felhaszn√°l√≥
            )
            
            all_users.extend(group_users)
            all_choices.extend(group_choices)
            
            # √Åtlagok ellen≈ërz√©se
            if group_choices:
                avg_hsi = np.mean([c['hsi'] for c in group_choices])
                avg_esi = np.mean([c['esi'] for c in group_choices])
                relevant_count = sum(1 for c in group_choices if c['is_relevant'])
                actual_precision = relevant_count / len(group_choices) if group_choices else 0
                
                logger.info(f"   ‚úÖ Gener√°lt: HSI={avg_hsi:.2f}, ESI={avg_esi:.2f}, Precision={actual_precision:.3f}")
                logger.info(f"   üìä {len(group_users)} felhaszn√°l√≥, {len(group_choices)} v√°laszt√°s")
        
        # Adatb√°zisba √≠r√°s
        logger.info("\nüíæ Val√≥s felhaszn√°l√≥i adatok ment√©se PostgreSQL-be...")
        if not insert_real_users_to_db(conn, all_users, all_choices):
            logger.error("‚ùå Adatb√°zis √≠r√°s sikertelen")
            return
        
        # Valid√°l√°s
        total_users, total_choices = validate_results(conn)
        
        logger.info("\nüéâ REAL USER SIMULATION BEFEJEZVE!")
        logger.info("‚úÖ Val√≥s felhaszn√°l√≥i adatok gener√°lva")
        logger.info(f"üìä {total_users} felhaszn√°l√≥, {total_choices} v√°laszt√°s")
        logger.info("\nüìã K√∂vetkez≈ë l√©p√©s:")
        logger.info("   heroku run python precision_recall_calculator.py -a your-app-name")
        
    except Exception as e:
        logger.error(f"‚ùå Szimul√°ci√≥s hiba: {e}")
        import traceback
        traceback.print_exc()
    finally:
        conn.close()

if __name__ == "__main__":
    main()
