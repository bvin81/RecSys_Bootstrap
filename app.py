# app.py - GreenRec Heroku Production Version (FIXED)
"""
GreenRec - Fenntarthat√≥ Receptaj√°nl√≥ Rendszer
üöÄ Heroku + PostgreSQL + GitHub Deployment Ready
‚úÖ 3 tanul√°si k√∂r (jav√≠tott)
‚úÖ Syntax error jav√≠t√°sok
‚úÖ Egyszer≈±s√≠tett template-ek
‚úÖ A/B/C teszt A csoport rejtett pontsz√°mokkal
"""

import os
import json
import random
import hashlib
import logging
from datetime import datetime
from collections import defaultdict, Counter

import pandas as pd
import numpy as np
from flask import Flask, request, jsonify, session, render_template_string
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# PostgreSQL import
try:
    import psycopg2
    from psycopg2.extras import RealDictCursor
    POSTGRES_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è psycopg2 not available, using fallback storage")
    POSTGRES_AVAILABLE = False

# Flask alkalmaz√°s inicializ√°l√°sa
app = Flask(__name__)

# üîß HEROKU KONFIGUR√ÅCI√ì
app.secret_key = os.environ.get('SECRET_KEY', 'greenrec-fallback-secret-key-2025')

# Environment-based configuration
DEBUG_MODE = os.environ.get('FLASK_ENV') == 'development'
PORT = int(os.environ.get('PORT', 5000))

# PostgreSQL konfigur√°ci√≥
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL and DATABASE_URL.startswith('postgres://'):
    # Heroku Postgres URL fix
    DATABASE_URL = DATABASE_URL.replace('postgres://', 'postgresql://', 1)

# ALKALMAZ√ÅS KONSTANSOK (JAV√çTOTT)
RECOMMENDATION_COUNT = 5  # ‚úÖ 5 recept aj√°nl√°s
RELEVANCE_THRESHOLD = 4   # Rating >= 4 = relev√°ns
MAX_LEARNING_ROUNDS = 3   # ‚úÖ 3 k√∂r az 5 helyett
GROUP_ALGORITHMS = {
    'A': 'content_based', 
    'B': 'score_enhanced', 
    'C': 'hybrid_xai'
}

# Glob√°lis v√°ltoz√≥k
recipes_df = None
tfidf_vectorizer = None
tfidf_matrix = None
user_sessions = {}
analytics_data = defaultdict(list)

# Logging setup
logging.basicConfig(
    level=logging.INFO if not DEBUG_MODE else logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# üóÑÔ∏è POSTGRESQL ADATB√ÅZIS FUNKCI√ìK (EGYSZER≈∞S√çTETT)

def get_db_connection():
    """PostgreSQL kapcsolat l√©trehoz√°sa"""
    try:
        if DATABASE_URL and POSTGRES_AVAILABLE:
            conn = psycopg2.connect(DATABASE_URL, sslmode='require')
            return conn
        else:
            return None
    except Exception as e:
        logger.error(f"‚ùå Adatb√°zis kapcsolat hiba: {str(e)}")
        return None

def init_database():
    """Adatb√°zis t√°bl√°k inicializ√°l√°sa"""
    conn = get_db_connection()
    if not conn:
        return False
    
    try:
        cur = conn.cursor()
        
        # User sessions t√°bla
        cur.execute("""
            CREATE TABLE IF NOT EXISTS user_sessions (
                user_id VARCHAR(100) PRIMARY KEY,
                user_group VARCHAR(1) NOT NULL,
                learning_round INTEGER DEFAULT 1,
                start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed BOOLEAN DEFAULT FALSE
            )
        """)
        
        # Recipe ratings t√°bla
        cur.execute("""
            CREATE TABLE IF NOT EXISTS recipe_ratings (
                id SERIAL PRIMARY KEY,
                user_id VARCHAR(100) NOT NULL,
                recipe_id VARCHAR(100) NOT NULL,
                rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
                learning_round INTEGER NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, recipe_id, learning_round)
            )
        """)
        
        conn.commit()
        cur.close()
        conn.close()
        
        logger.info("‚úÖ PostgreSQL t√°bl√°k inicializ√°lva")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Adatb√°zis inicializ√°l√°s hiba: {str(e)}")
        if conn:
            conn.rollback()
            conn.close()
        return False

def save_rating_db(user_id, recipe_id, rating, learning_round):
    """√ârt√©kel√©s ment√©se PostgreSQL-be"""
    conn = get_db_connection()
    if not conn:
        return False
    
    try:
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO recipe_ratings (user_id, recipe_id, rating, learning_round)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (user_id, recipe_id, learning_round)
            DO UPDATE SET rating = %s, timestamp = CURRENT_TIMESTAMP
        """, (user_id, recipe_id, rating, learning_round, rating))
        
        conn.commit()
        cur.close()
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Rating ment√©s hiba: {str(e)}")
        if conn:
            conn.rollback()
            conn.close()
        return False

def get_user_ratings_db(user_id, learning_round=None):
    """Felhaszn√°l√≥ √©rt√©kel√©seinek lek√©r√©se PostgreSQL-b≈ël"""
    conn = get_db_connection()
    if not conn:
        return {}
    
    try:
        cur = conn.cursor(cursor_factory=RealDictCursor)
        
        if learning_round:
            cur.execute("""
                SELECT recipe_id, rating 
                FROM recipe_ratings 
                WHERE user_id = %s AND learning_round = %s
            """, (user_id, learning_round))
        else:
            cur.execute("""
                SELECT recipe_id, rating 
                FROM recipe_ratings 
                WHERE user_id = %s
            """, (user_id,))
        
        ratings = {row['recipe_id']: row['rating'] for row in cur.fetchall()}
        
        cur.close()
        conn.close()
        return ratings
        
    except Exception as e:
        logger.error(f"‚ùå Ratings lek√©r√©s hiba: {str(e)}")
        if conn:
            conn.close()
        return {}

# üöÄ ALKALMAZ√ÅS INICIALIZ√ÅL√ÅS (EGYSZER≈∞S√çTETT)

def ensure_initialized():
    """Rendszer inicializ√°l√°sa"""
    global recipes_df, tfidf_vectorizer, tfidf_matrix
    
    if recipes_df is None:
        logger.info("üöÄ GreenRec rendszer inicializ√°l√°sa Heroku-n...")
        
        # PostgreSQL inicializ√°l√°s
        if POSTGRES_AVAILABLE:
            init_database()
        
        try:
            # JSON f√°jl bet√∂lt√©se
            recipe_data = load_recipe_data()
            
            # DataFrame l√©trehoz√°sa
            recipes_df = pd.DataFrame(recipe_data)
            
            # ‚úÖ ESI INVERZ NORMALIZ√ÅL√ÅS
            if 'ESI' in recipes_df.columns:
                esi_min = recipes_df['ESI'].min()
                esi_max = recipes_df['ESI'].max()
                if esi_max > esi_min:
                    recipes_df['ESI_normalized'] = 100 * (recipes_df['ESI'] - esi_min) / (esi_max - esi_min)
                else:
                    recipes_df['ESI_normalized'] = 50
                
                # ‚úÖ INVERZ ESI: 100 - normaliz√°lt_ESI
                recipes_df['ESI_final'] = 100 - recipes_df['ESI_normalized']
            else:
                recipes_df['ESI_final'] = np.random.uniform(30, 80, len(recipes_df))
            
            # HSI √©s PPI
            if 'HSI' not in recipes_df.columns:
                recipes_df['HSI'] = np.random.uniform(30, 95, len(recipes_df))
            if 'PPI' not in recipes_df.columns:
                recipes_df['PPI'] = np.random.uniform(20, 90, len(recipes_df))
            
            # ‚úÖ KOMPOZIT PONTSZ√ÅM
            recipes_df['composite_score'] = (
                recipes_df['ESI_final'] * 0.4 +
                recipes_df['HSI'] * 0.4 +
                recipes_df['PPI'] * 0.2
            ).round(1)
            
            ensure_required_columns()
            setup_tfidf()
            
            logger.info(f"‚úÖ {len(recipes_df)} recept bet√∂ltve Heroku-n")
            logger.info(f"üìä Kompozit pontsz√°m: {recipes_df['composite_score'].min():.1f} - {recipes_df['composite_score'].max():.1f}")
            
        except Exception as e:
            logger.error(f"‚ùå Inicializ√°l√°si hiba: {str(e)}")
            recipes_df = pd.DataFrame(generate_demo_data())
            ensure_required_columns()
            setup_tfidf()

def load_recipe_data():
    """Recept adatok bet√∂lt√©se"""
    possible_files = [
        'greenrec_dataset.json',
        'data/greenrec_dataset.json', 
        'recipes.json'
    ]
    
    for filename in possible_files:
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                logger.info(f"‚úÖ Recept adatok bet√∂ltve: {filename}")
                return data
        except Exception as e:
            continue
    
    logger.warning("‚ö†Ô∏è Recept f√°jl nem tal√°lhat√≥, demo adatok gener√°l√°sa...")
    return generate_demo_data()

def ensure_required_columns():
    """Sz√ºks√©ges oszlopok ellen≈ërz√©se"""
    global recipes_df
    
    if 'name' not in recipes_df.columns:
        recipes_df['name'] = [f"Recept {i+1}" for i in range(len(recipes_df))]
    if 'category' not in recipes_df.columns:
        categories = ['F≈ë√©tel', 'Leves', 'Sal√°ta', 'Desszert', 'Snack']
        recipes_df['category'] = [random.choice(categories) for _ in range(len(recipes_df))]
    if 'ingredients' not in recipes_df.columns:
        recipes_df['ingredients'] = ["hagyma, fokhagyma, paradicsom" for _ in range(len(recipes_df))]
    
    # ID oszlop
    if 'recipeid' not in recipes_df.columns and 'id' not in recipes_df.columns:
        recipes_df['recipeid'] = [f"recipe_{i+1}" for i in range(len(recipes_df))]

def setup_tfidf():
    """TF-IDF inicializ√°l√°sa"""
    global tfidf_vectorizer, tfidf_matrix
    
    try:
        content = []
        for _, recipe in recipes_df.iterrows():
            text = f"{recipe.get('name', '')} {recipe.get('category', '')} {recipe.get('ingredients', '')}"
            content.append(text.lower())
        
        tfidf_vectorizer = TfidfVectorizer(
            max_features=min(1000, len(content) * 10),
            stop_words=None,
            ngram_range=(1, 2)
        )
        tfidf_matrix = tfidf_vectorizer.fit_transform(content)
        logger.info("‚úÖ TF-IDF m√°trix inicializ√°lva")
        
    except Exception as e:
        logger.error(f"‚ùå TF-IDF hiba: {str(e)}")

def generate_demo_data():
    """Demo adatok gener√°l√°sa"""
    categories = ['F≈ë√©tel', 'Leves', 'Sal√°ta', 'Desszert', 'Snack']
    ingredients_lists = [
        'hagyma, fokhagyma, paradicsom, paprika',
        'csirkemell, brokkoli, rizs, sz√≥jasz√≥sz',
        'sal√°ta, uborka, paradicsom, citrom',
        'toj√°s, liszt, cukor, vaj, van√≠lia',
        'mandula, di√≥, m√©z, zabpehely',
        'avok√°d√≥, spen√≥t, ban√°n, chia mag'
    ]
    
    demo_recipes = []
    for i in range(100):
        demo_recipes.append({
            'recipeid': f'demo_recipe_{i+1}',
            'name': f'Demo Recept {i+1}',
            'category': random.choice(categories),
            'ingredients': random.choice(ingredients_lists),
            'ESI': random.uniform(10, 90),
            'HSI': random.uniform(30, 95),
            'PPI': random.uniform(20, 90)
        })
    
    return demo_recipes

# üéØ FELHASZN√ÅL√ìI FUNKCI√ìK

def get_user_group(user_id):
    """Determinisztikus A/B/C csoport kioszt√°s"""
    hash_value = int(hashlib.md5(user_id.encode()).hexdigest()[:8], 16)
    return ['A', 'B', 'C'][hash_value % 3]

def initialize_user_session():
    """Felhaszn√°l√≥i session inicializ√°l√°sa"""
    if 'user_id' not in session:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        session['user_id'] = f"user_{timestamp}_{random.randint(1000, 9999)}"
        session['user_group'] = get_user_group(session['user_id'])
        session['learning_round'] = 1
        session['start_time'] = datetime.now().isoformat()
        
        logger.info(f"üë§ √öj felhaszn√°l√≥: {session['user_id']}, Csoport: {session['user_group']}")
    
    return session['user_id'], session['user_group'], session.get('learning_round', 1)

def get_personalized_recommendations(user_id, user_group, learning_round, n=5):
    """Szem√©lyre szabott aj√°nl√°sok gener√°l√°sa"""
    ensure_initialized()
    
    if learning_round == 1:
        # Els≈ë k√∂r: random receptek
        selected = recipes_df.sample(n=min(n, len(recipes_df)))
        logger.info(f"üé≤ Random aj√°nl√°sok (1. k√∂r): {len(selected)} recept")
        return selected
    
    # 2+ k√∂r: szem√©lyre szabott
    try:
        if POSTGRES_AVAILABLE:
            previous_ratings = get_user_ratings_db(user_id)
        else:
            previous_ratings = session.get('all_ratings', {})
        
        liked_recipe_ids = [rid for rid, rating in previous_ratings.items() if rating >= RELEVANCE_THRESHOLD]
        
        if not liked_recipe_ids:
            selected = recipes_df.nlargest(n, 'composite_score')
            logger.info(f"üìä Magas pontsz√°m√∫ aj√°nl√°sok: {len(selected)} recept")
            return selected
        
        # M√©g nem √©rt√©kelt receptek
        unrated_recipes = recipes_df[~recipes_df['recipeid'].isin(previous_ratings.keys())].copy()
        
        if len(unrated_recipes) == 0:
            selected = recipes_df.sample(n=min(n, len(recipes_df)))
            return selected
        
        # Csoportonk√©nti algoritmusok
        if user_group == 'A':
            # Content-based egyszer≈±s√≠tett
            selected = unrated_recipes.sample(n=min(n, len(unrated_recipes)))
        elif user_group == 'B':
            # Score-enhanced
            selected = unrated_recipes.nlargest(n, 'composite_score')
        else:  # Csoport C
            # Hybrid
            top_half = len(unrated_recipes) // 2
            high_score = unrated_recipes.nlargest(top_half, 'composite_score')
            selected = high_score.sample(n=min(n, len(high_score)))
        
        logger.info(f"üéØ Szem√©lyre szabott aj√°nl√°sok ({user_group} csoport): {len(selected)} recept")
        return selected
        
    except Exception as e:
        logger.error(f"‚ùå Aj√°nl√°s hiba: {str(e)}")
        selected = recipes_df.sample(n=min(n, len(recipes_df)))
        return selected

# üåê FLASK ROUTE-OK (EGYSZER≈∞S√çTETT)

@app.route('/')
def index():
    """F≈ëoldal - Egyszer≈±s√≠tett verzi√≥"""
    ensure_initialized()
    user_id, user_group, learning_round = initialize_user_session()
    
    # Befejez√©s ellen≈ërz√©se
    if learning_round > MAX_LEARNING_ROUNDS:
        return redirect_to_results()
    
    # Aj√°nl√°sok gener√°l√°sa
    recommendations = get_personalized_recommendations(
        user_id, user_group, learning_round, n=RECOMMENDATION_COUNT
    )
    
    # Jelenlegi k√∂r √©rt√©kel√©sek
    if POSTGRES_AVAILABLE:
        current_ratings = get_user_ratings_db(user_id, learning_round)
    else:
        current_ratings = session.get('ratings', {})
    
    # HTML gener√°l√°sa
    html = generate_main_page_html(
        recommendations=recommendations.to_dict('records'),
        user_group=user_group,
        learning_round=learning_round,
        max_rounds=MAX_LEARNING_ROUNDS,
        rated_count=len(current_ratings)
    )
    
    return html

@app.route('/rate', methods=['POST'])
def rate_recipe():
    """Recept √©rt√©kel√©se"""
    try:
        data = request.get_json()
        recipe_id = data.get('recipe_id')
        rating = int(data.get('rating', 0))
        
        if not recipe_id or not (1 <= rating <= 5):
            return jsonify({'error': '√ârv√©nytelen adatok'}), 400
        
        user_id, user_group, learning_round = initialize_user_session()
        
        # PostgreSQL ment√©s
        if POSTGRES_AVAILABLE:
            save_rating_db(user_id, recipe_id, rating, learning_round)
            current_ratings = get_user_ratings_db(user_id, learning_round)
        else:
            # Session fallback
            if 'ratings' not in session:
                session['ratings'] = {}
            session['ratings'][recipe_id] = rating
            session.modified = True
            current_ratings = session['ratings']
        
        logger.info(f"‚≠ê √ârt√©kel√©s: {recipe_id} = {rating} csillag (K√∂r: {learning_round})")
        
        return jsonify({
            'success': True,
            'rated_count': len(current_ratings),
            'total_needed': RECOMMENDATION_COUNT
        })
        
    except Exception as e:
        logger.error(f"‚ùå √ârt√©kel√©si hiba: {str(e)}")
        return jsonify({'error': 'Szerver hiba'}), 500

@app.route('/next_round', methods=['POST'])
def next_round():
    """K√∂vetkez≈ë tanul√°si k√∂r"""
    try:
        user_id, user_group, learning_round = initialize_user_session()
        
        # Aktu√°lis k√∂r √©rt√©kel√©seinek ellen≈ërz√©se
        if POSTGRES_AVAILABLE:
            current_ratings = get_user_ratings_db(user_id, learning_round)
        else:
            current_ratings = session.get('ratings', {})
        
        if len(current_ratings) < RECOMMENDATION_COUNT:
            return jsonify({
                'success': False,
                'message': f'K√©rj√ºk, √©rt√©kelje mind a {RECOMMENDATION_COUNT} receptet!'
            }), 400
        
        # K√∂vetkez≈ë k√∂r ellen≈ërz√©se
        if learning_round >= MAX_LEARNING_ROUNDS:
            return jsonify({
                'success': False,
                'message': 'Tanulm√°ny befejezve!',
                'redirect': '/results'
            })
        
        # K√∂vetkez≈ë k√∂r inicializ√°l√°sa
        next_round_num = learning_round + 1
        session['learning_round'] = next_round_num
        
        # Session ratings tiszt√≠t√°sa
        if 'ratings' in session:
            session['ratings'] = {}
        session.modified = True
        
        logger.info(f"üîÑ {user_id} √°tl√©pett a {next_round_num}. k√∂rbe")
        
        return jsonify({
            'success': True,
            'new_round': next_round_num,
            'message': f'Sikeresen √°tl√©pett a {next_round_num}. k√∂rbe!'
        })
            
    except Exception as e:
        logger.error(f"‚ùå K√∂vetkez≈ë k√∂r hiba: {str(e)}")
        return jsonify({'error': 'Szerver hiba'}), 500

@app.route('/results')
def results():
    """Eredm√©nyek oldal"""
    user_id = session.get('user_id', 'Unknown')
    user_group = session.get('user_group', 'Unknown')
    
    if POSTGRES_AVAILABLE:
        all_ratings = get_user_ratings_db(user_id)
    else:
        all_ratings = session.get('all_ratings', {})
    
    html = generate_results_page_html(user_id, user_group, all_ratings)
    return html

@app.route('/health')
def health():
    """Health check"""
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})

@app.route('/status')
def status():
    """Rendszer status"""
    ensure_initialized()
    
    return jsonify({
        'service': 'GreenRec',
        'version': '2.0-fixed',
        'status': 'running',
        'recipes_count': len(recipes_df) if recipes_df is not None else 0,
        'learning_rounds': MAX_LEARNING_ROUNDS,
        'database_status': 'connected' if get_db_connection() else 'disconnected',
        'timestamp': datetime.now().isoformat()
    })

# üìÑ HTML GENER√ÅTOR FUNKCI√ìK (EGYSZER≈∞S√çTETT)

def generate_main_page_html(recommendations, user_group, learning_round, max_rounds, rated_count):
    """F≈ëoldal HTML gener√°l√°sa"""
    
    # Recept k√°rty√°k gener√°l√°sa
    recipe_cards = ""
    for recipe in recommendations:
        # A csoport: rejtett pontsz√°mok
        if user_group == 'A':
            scores_html = '''
            <div style="background: #f5f5f5; border: 2px dashed #ccc; color: #999; text-align: center; padding: 15px; border-radius: 10px; margin: 15px 0;">
                <i>A fenntarthat√≥s√°gi pontsz√°mok rejtve vannak ebben a tesztcsoportban</i>
            </div>
            '''
        else:
            scores_html = f'''
            <div style="display: flex; justify-content: space-around; margin: 15px 0; padding: 10px; background: rgba(0,0,0,0.05); border-radius: 8px;">
                <div style="text-align: center;">
                    <div style="font-size: 1.5em; margin-bottom: 5px;">üåç</div>
                    <div style="font-weight: bold;">{recipe.get("ESI_final", 50):.0f}</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 1.5em; margin-bottom: 5px;">üíö</div>
                    <div style="font-weight: bold;">{recipe.get("HSI", 50):.0f}</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 1.5em; margin-bottom: 5px;">üë§</div>
                    <div style="font-weight: bold;">{recipe.get("PPI", 50):.0f}</div>
                </div>
            </div>
            '''
        
        recipe_cards += f'''
        <div style="background: rgba(255,255,255,0.95); border-radius: 15px; padding: 20px; margin-bottom: 20px; box-shadow: 0 8px 32px rgba(0,0,0,0.1);">
            <h3 style="color: #2c3e50; margin-bottom: 10px;">{recipe.get("name", "N√©vtelen recept")}</h3>
            <div style="background: #3498db; color: white; padding: 4px 12px; border-radius: 12px; font-size: 0.8em; margin-bottom: 10px; display: inline-block;">
                {recipe.get("category", "Kateg√≥ria")}
            </div>
            <p style="color: #666; margin-bottom: 15px;"><strong>√ñsszetev≈ëk:</strong> {recipe.get("ingredients", "Nincs megadva")}</p>
            
            {scores_html}
            
            <div style="text-align: center; margin-top: 15px;">
                <p><strong>Mennyire tetszik ez a recept?</strong></p>
                <div class="rating-stars" data-recipe-id="{recipe.get("recipeid", "unknown")}" style="display: flex; justify-content: center; gap: 5px; margin: 10px 0;">
                    <span class="star" data-rating="1" style="font-size: 2em; cursor: pointer; color: #ddd;">‚òÜ</span>
                    <span class="star" data-rating="2" style="font-size: 2em; cursor: pointer; color: #ddd;">‚òÜ</span>
                    <span class="star" data-rating="3" style="font-size: 2em; cursor: pointer; color: #ddd;">‚òÜ</span>
                    <span class="star" data-rating="4" style="font-size: 2em; cursor: pointer; color: #ddd;">‚òÜ</span>
                    <span class="star" data-rating="5" style="font-size: 2em; cursor: pointer; color: #ddd;">‚òÜ</span>
                </div>
                <div class="rating-feedback" style="height: 20px; font-size: 0.9em; color: #666;"></div>
            </div>
        </div>
        '''
    
    html = f'''
    <!DOCTYPE html>
    <html lang="hu">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>GreenRec - {learning_round}. K√∂r</title>
        <style>
            body {{
                font-family: 'Segoe UI', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 20px;
                min-height: 100vh;
            }}
            .container {{
                max-width: 800px;
                margin: 0 auto;
            }}
            .header {{
                text-align: center;
                color: white;
                margin-bottom: 30px;
                background: rgba(255,255,255,0.1);
                padding: 20px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
            }}
            .progress-info {{
                background: rgba(255,255,255,0.15);
                padding: 15px;
                border-radius: 15px;
                margin-bottom: 20px;
                text-align: center;
                color: white;
            }}
            .progress-bar {{
                background: rgba(255,255,255,0.3);
                height: 8px;
                border-radius: 4px;
                margin: 10px 0;
                overflow: hidden;
            }}
            .progress-fill {{
                background: linear-gradient(90deg, #4CAF50, #8BC34A);
                height: 100%;
                border-radius: 4px;
                transition: width 0.3s ease;
                width: {(rated_count / RECOMMENDATION_COUNT * 100)}%;
            }}
            .controls {{
                text-align: center;
                margin-top: 30px;
            }}
            .btn {{
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                border: none;
                padding: 15px 30px;
                border-radius: 25px;
                font-size: 1.1em;
                cursor: pointer;
                margin: 0 10px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            }}
            .btn:disabled {{
                opacity: 0.6;
                cursor: not-allowed;
            }}
            .btn:hover:not(:disabled) {{
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            }}
            .star:hover {{
                color: #FFA500 !important;
                transform: scale(1.2);
            }}
            .star.selected {{
                color: #FFD700 !important;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üå± GreenRec Tanulm√°ny</h1>
                <p>{learning_round}. k√∂r a {max_rounds}-b√≥l ‚Ä¢ {user_group} Csoport</p>
            </div>
            
            <div class="progress-info">
                <h3>üìä Tanul√°si Folyamat</h3>
                <p>√ârt√©kelje az al√°bbi {RECOMMENDATION_COUNT} receptet 1-5 csillaggal!</p>
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <p><span id="ratedCount">{rated_count}</span> / {RECOMMENDATION_COUNT} recept √©rt√©kelve</p>
            </div>
            
            <div id="messageArea"></div>
            
            {recipe_cards}
            
            <div class="controls">
                <button id="nextRoundBtn" class="btn" disabled>
                    üîÑ K√∂vetkez≈ë K√∂r ({learning_round + 1}/{max_rounds})
                </button>
                <button onclick="window.location.href='/status'" class="btn">
                    üìä Rendszer Status
                </button>
            </div>
        </div>

        <script>
            let ratings = {{}};
            let ratedCount = {rated_count};
            const totalCount = {RECOMMENDATION_COUNT};
            const maxRounds = {max_rounds};
            const currentRound = {learning_round};
            
            // Csillag kezel√©s
            document.querySelectorAll('.rating-stars').forEach(starsContainer => {{
                const recipeId = starsContainer.dataset.recipeId;
                const stars = starsContainer.querySelectorAll('.star');
                const feedback = starsContainer.parentElement.querySelector('.rating-feedback');
                
                stars.forEach((star, index) => {{
                    star.addEventListener('click', () => {{
                        const rating = parseInt(star.dataset.rating);
                        rateRecipe(recipeId, rating, stars, feedback);
                    }});
                    
                    star.addEventListener('mouseenter', () => {{
                        stars.forEach((s, i) => {{
                            if (i <= index) {{
                                s.style.color = '#FFA500';
                            }} else {{
                                s.style.color = '#ddd';
                            }}
                        }});
                    }});
                    
                    star.addEventListener('mouseleave', () => {{
                        stars.forEach(s => {{
                            if (!s.classList.contains('selected')) {{
                                s.style.color = '#ddd';
                            }}
                        }});
                    }});
                }});
            }});
            
            function rateRecipe(recipeId, rating, stars, feedback) {{
                // Vizu√°lis feedback
                stars.forEach((star, index) => {{
                    if (index < rating) {{
                        star.classList.add('selected');
                        star.textContent = '‚òÖ';
                        star.style.color = '#FFD700';
                    }} else {{
                        star.classList.remove('selected');
                        star.textContent = '‚òÜ';
                        star.style.color = '#ddd';
                    }}
                }});
                
                // Feedback sz√∂veg
                const feedbackTexts = ['', 'üòû Nem tetszik', 'üòê Kicsit tetszik', 'üòä Semleges', 'üòÉ Tetszik', 'ü§© Nagyon tetszik!'];
                feedback.textContent = feedbackTexts[rating];
                feedback.style.color = rating >= 4 ? '#4CAF50' : rating >= 3 ? '#FF9800' : '#f44336';
                
                // √ârt√©kel√©s ment√©se
                if (!ratings[recipeId]) {{
                    ratedCount++;
                }}
                ratings[recipeId] = rating;
                
                // AJAX k√©r√©s
                fetch('/rate', {{
                    method: 'POST',
                    headers: {{'Content-Type': 'application/json'}},
                    body: JSON.stringify({{recipe_id: recipeId, rating: rating}})
                }})
                .then(response => response.json())
                .then(data => {{
                    if (data.success) {{
                        updateProgress(data.rated_count, data.total_needed);
                    }} else {{
                        showMessage('Hiba t√∂rt√©nt az √©rt√©kel√©s ment√©se sor√°n', 'error');
                    }}
                }})
                .catch(error => {{
                    console.error('Rating error:', error);
                    showMessage('Hiba t√∂rt√©nt az √©rt√©kel√©s ment√©se sor√°n', 'error');
                }});
            }}
            
            function updateProgress(rated, total) {{
                ratedCount = rated;
                document.getElementById('ratedCount').textContent = rated;
                document.getElementById('progressFill').style.width = (rated / total * 100) + '%';
                
                const nextBtn = document.getElementById('nextRoundBtn');
                if (rated >= total) {{
                    nextBtn.disabled = false;
                    nextBtn.textContent = currentRound >= maxRounds ? 
                        'üèÅ Tanulm√°ny Befejez√©se' : 
                        'üîÑ K√∂vetkez≈ë K√∂r (' + (currentRound + 1) + '/' + maxRounds + ')';
                    showMessage('üéâ Minden recept √©rt√©kelve! Ind√≠thatja a k√∂vetkez≈ë k√∂rt.', 'success');
                }}
            }}
            
            // K√∂vetkez≈ë k√∂r
            document.getElementById('nextRoundBtn').addEventListener('click', () => {{
                if (ratedCount < totalCount) {{
                    showMessage('K√©rj√ºk, √©rt√©kelje mind a ' + totalCount + ' receptet!', 'info');
                    return;
                }}
                
                showMessage('K√∂vetkez≈ë k√∂r el≈ëk√©sz√≠t√©se...', 'info');
                
                fetch('/next_round', {{
                    method: 'POST',
                    headers: {{'Content-Type': 'application/json'}}
                }})
                .then(response => response.json())
                .then(data => {{
                    if (data.success) {{
                        showMessage(data.message || 'K√∂vetkez≈ë k√∂r ind√≠t√°sa...', 'success');
                        setTimeout(() => {{
                            location.reload();
                        }}, 1500);
                    }} else if (data.redirect) {{
                        showMessage('Tanulm√°ny befejezve! √Åtir√°ny√≠t√°s...', 'success');
                        setTimeout(() => {{
                            window.location.href = data.redirect;
                        }}, 2000);
                    }} else {{
                        showMessage(data.message || 'Hiba t√∂rt√©nt', 'error');
                    }}
                }})
                .catch(error => {{
                    console.error('Next round error:', error);
                    showMessage('Hiba t√∂rt√©nt a k√∂vetkez≈ë k√∂r ind√≠t√°sakor', 'error');
                }});
            }});
            
            function showMessage(text, type) {{
                const messageArea = document.getElementById('messageArea');
                const colors = {{
                    'success': '#4CAF50',
                    'error': '#f44336',
                    'info': '#2196F3'
                }};
                messageArea.innerHTML = '<div style="background: rgba(255,255,255,0.9); color: ' + colors[type] + '; padding: 15px; border-radius: 10px; text-align: center; margin: 20px 0; font-weight: bold;">' + text + '</div>';
                
                setTimeout(() => {{
                    messageArea.innerHTML = '';
                }}, 5000);
            }}
            
            // Kezdeti √°llapot
            updateProgress(ratedCount, totalCount);
        </script>
    </body>
    </html>
    '''
    
    return html

def generate_results_page_html(user_id, user_group, all_ratings):
    """Eredm√©nyek oldal HTML"""
    total_ratings = len(all_ratings)
    avg_rating = sum(all_ratings.values()) / total_ratings if total_ratings > 0 else 0
    
    html = f'''
    <!DOCTYPE html>
    <html lang="hu">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>GreenRec - Eredm√©nyek</title>
        <style>
            body {{
                font-family: 'Segoe UI', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 20px;
                min-height: 100vh;
            }}
            .container {{
                max-width: 600px;
                margin: 50px auto;
                background: rgba(255,255,255,0.95);
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 15px 35px rgba(0,0,0,0.1);
                text-align: center;
            }}
            h1 {{
                color: #2c3e50;
                margin-bottom: 30px;
            }}
            .stat-card {{
                background: #f8f9fa;
                padding: 20px;
                border-radius: 15px;
                margin: 15px 0;
                border-left: 5px solid #4CAF50;
            }}
            .btn {{
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                border: none;
                padding: 15px 30px;
                border-radius: 25px;
                font-size: 1.1em;
                cursor: pointer;
                text-decoration: none;
                display: inline-block;
                margin: 10px;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéâ K√∂sz√∂nj√ºk a r√©szv√©telt!</h1>
            
            <div class="stat-card">
                <h3>üìä Az √ñn eredm√©nyei</h3>
                <p><strong>Felhaszn√°l√≥ ID:</strong> {user_id}</p>
                <p><strong>Teszt csoport:</strong> {user_group}</p>
                <p><strong>√ârt√©kelt receptek:</strong> {total_ratings}</p>
                <p><strong>√Åtlag √©rt√©kel√©s:</strong> {avg_rating:.1f} / 5.0</p>
            </div>
            
            <div class="stat-card">
                <h4>üî¨ Kutat√°si inform√°ci√≥k</h4>
                <p>Az √ñn adatai hozz√°j√°rulnak a fenntarthat√≥ √©tkez√©si szok√°sok kutat√°s√°hoz.</p>
                <p>A tanulm√°ny eredm√©nyei seg√≠tenek fejleszteni az AI-alap√∫ aj√°nl√≥rendszereket.</p>
            </div>
            
            <div style="margin-top: 30px;">
                <a href="/" class="btn">üè† Vissza a f≈ëoldalra</a>
                <a href="/status" class="btn">üìä Rendszer Status</a>
            </div>
        </div>
    </body>
    </html>
    '''
    
    return html

def redirect_to_results():
    """√Åtir√°ny√≠t√°s az eredm√©nyek oldalra"""
    return '''
    <script>
        window.location.href = '/results';
    </script>
    <p>√Åtir√°ny√≠t√°s az eredm√©nyekhez...</p>
    '''

if __name__ == '__main__':
    print("üå± GreenRec - Jav√≠tott Production Verzi√≥")
    print("=" * 50)
    print("‚úÖ 3 tanul√°si k√∂r")
    print("‚úÖ Syntax error jav√≠t√°sok")
    print("‚úÖ A csoport: rejtett pontsz√°mok")
    print("‚úÖ Egyszer≈±s√≠tett template-ek") 
    print("‚úÖ PostgreSQL opcion√°lis")
    print("=" * 50)
    print(f"üöÄ Szerver port: {PORT}")
    print(f"üîß Debug m√≥d: {DEBUG_MODE}")
    print(f"üóÑÔ∏è PostgreSQL: {'‚úÖ El√©rhet≈ë' if POSTGRES_AVAILABLE else '‚ùå Mem√≥ria-alap√∫'}")
    print("=" * 50)
    
    # Flask alkalmaz√°s ind√≠t√°sa
    app.run(
        debug=DEBUG_MODE,
        host='0.0.0.0',
        port=PORT
    )
