# app.py - GreenRec Slim Orchestrator
"""
GreenRec - F≈ëalkalmaz√°s (Modul√°ris Verzi√≥)
==========================================
Slim main application - csak orchestration, √ºzleti logika k√ºl√∂n modulokban

Architekt√∫ra:
- models/ ‚Üí ML algoritmusok √©s adatmodellek
- services/ ‚Üí √úzleti logika (Blueprint-ek)
- user_study/ ‚Üí Megl√©v≈ë kutat√°si modul
- utils/ ‚Üí Seg√©dfunkci√≥k
- templates/ ‚Üí HTML template-ek
- static/ ‚Üí CSS/JS/k√©pek
"""

from flask import Flask, render_template, redirect, url_for, session
import os
import logging
from datetime import datetime

# Konfigur√°ci√≥ import
from config import Config

# Blueprint importok
from user_study import user_study_bp
from services.recipe_service import recipe_bp
from services.analytics_service import analytics_bp

# Utility importok
from utils.helpers import setup_logging, init_data_if_needed

def create_app():
    """Flask alkalmaz√°s factory pattern"""
    app = Flask(__name__)
    
    # Konfigur√°ci√≥ bet√∂lt√©se
    app.config.from_object(Config)
    
    # Logging be√°ll√≠t√°sa
    setup_logging(app)
    
    # Adatok inicializ√°l√°sa (ha sz√ºks√©ges)
    with app.app_context():
        init_data_if_needed()
    
    # Blueprint regisztr√°l√°s
    register_blueprints(app)
    
    # F≈ëoldal route-ok
    register_main_routes(app)
    
    # Error handling
    register_error_handlers(app)
    
    return app

def register_blueprints(app):
    """Blueprint-ek regisztr√°l√°sa"""
    
    # User Study Blueprint (megl√©v≈ë)
    app.register_blueprint(user_study_bp, url_prefix='/study')
    
    # Recipe Service Blueprint (√∫j funkcionalit√°s)
    app.register_blueprint(recipe_bp, url_prefix='/api')
    
    # Analytics Service Blueprint (metrik√°k, A/B/C teszt)
    app.register_blueprint(analytics_bp, url_prefix='/analytics')
    
    app.logger.info("‚úÖ Blueprints registered successfully")

def register_main_routes(app):
    """F≈ëoldal route-ok regisztr√°l√°sa"""
    
    @app.route('/')
    def index():
        """F≈ëoldal - redirect a megfelel≈ë oldalra"""
        # Ha van akt√≠v session, direkt a study-ra
        if 'user_id' in session:
            return redirect(url_for('recipes.enhanced_study'))
        
        # K√ºl√∂nben welcome oldalra
        return redirect(url_for('recipes.enhanced_study'))
    
    @app.route('/health')
    def health_check():
        """Health check endpoint Heroku sz√°m√°ra"""
        return {
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'version': '2.0-modular'
        }
    
    @app.route('/favicon.ico')
    def favicon():
        """Favicon endpoint"""
        return app.send_static_file('favicon.ico')

def register_error_handlers(app):
    """Error handling regisztr√°l√°sa"""
    
    @app.errorhandler(404)
    def not_found_error(error):
        return render_template('errors/404.html'), 404
    
    @app.errorhandler(500)
    def internal_error(error):
        app.logger.error(f'Server Error: {error}')
        return render_template('errors/500.html'), 500
    
    @app.errorhandler(Exception)
    def handle_exception(e):
        app.logger.error(f'Unhandled Exception: {e}')
        if app.debug:
            raise e
        return render_template('errors/500.html'), 500

# Context processors √©s template helpers
def register_template_helpers(app):
    """Template helper funkci√≥k"""
    
    @app.context_processor
    def inject_global_vars():
        return {
            'current_year': datetime.now().year,
            'app_version': '2.0',
            'user_group': session.get('user_group', 'unknown')
        }

if __name__ == '__main__':
    # Alkalmaz√°s l√©trehoz√°sa √©s futtat√°sa
    app = create_app()
    
    # Template helpers regisztr√°l√°sa
    register_template_helpers(app)
    
    # Environment-specific be√°ll√≠t√°sok
    debug_mode = os.environ.get('FLASK_ENV') == 'development'
    port = int(os.environ.get('PORT', 5000))
    
    print("üå± GreenRec - Modul√°ris Architekt√∫ra")
    print("=" * 50)
    print("‚úÖ Slim main application")
    print("‚úÖ Blueprint-based architecture")
    print("‚úÖ Separation of concerns")
    print("‚úÖ 3 tanul√°si k√∂r + k√©pek + rejtett pontsz√°mok")
    print("‚úÖ A/B/C teszt analytics")
    print("=" * 50)
    print(f"üöÄ Server: http://localhost:{port}")
    
    # Flask alkalmaz√°s ind√≠t√°sa
    app.run(
        debug=debug_mode,
        host='0.0.0.0',
        port=port
    )
