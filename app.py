# app.py - GreenRec az √ñn JSON strukt√∫r√°j√°hoz optimaliz√°lva
"""
GreenRec - Fenntarthat√≥ Receptaj√°nl√≥ Rendszer
Optimaliz√°lva a val√≥s GreenRec JSON form√°tumhoz
"""

from flask import Flask, render_template_string, request, session, jsonify
import json
import pandas as pd
import numpy as np
import hashlib
from datetime import datetime
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MinMaxScaler

# Flask alkalmaz√°s inicializ√°l√°sa
app = Flask(__name__)
app.secret_key = 'greenrec-secret-key-2024'

# Glob√°lis v√°ltoz√≥k
recipes_df = None
vectorizer = None
ingredients_matrix = None
user_behaviors = []

def load_json_data(filename='greenrec_dataset.json'):
    """JSON adatok bet√∂lt√©se √©s DataFrame-√© alak√≠t√°sa - val√≥s strukt√∫r√°hoz"""
    global recipes_df, vectorizer, ingredients_matrix
    
    try:
        print(f"üìÇ JSON f√°jl bet√∂lt√©se: {filename}")
        
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Az √ñn JSON-ja egy lista objektumokat tartalmaz
        if isinstance(data, list):
            recipes_data = data
        else:
            raise ValueError("A JSON f√°jl nem lista form√°tum√∫")
        
        # DataFrame l√©trehoz√°sa
        recipes_df = pd.DataFrame(recipes_data)
        
        print(f"üìä Eredeti oszlopok: {list(recipes_df.columns)}")
        
        # Oszlop nev√©nek standardiz√°l√°sa az √ñn strukt√∫r√°j√°hoz
        column_mapping = {
            'recipeid': 'id',
            'title': 'title',
            'ingredients': 'ingredients', 
            'instructions': 'instructions',
            'ESI': 'ESI',
            'HSI': 'HSI',
            'PPI': 'PPI',
            'category': 'category',
            'images': 'image_url'
        }
        
        # Oszlopok √°tnevez√©se ha sz√ºks√©ges
        recipes_df = recipes_df.rename(columns=column_mapping)
        
        # K√∂telez≈ë oszlopok ellen≈ërz√©se
        required_columns = ['title', 'ingredients', 'HSI', 'ESI', 'PPI']
        missing_columns = [col for col in required_columns if col not in recipes_df.columns]
        
        if missing_columns:
            print(f"‚ùå Hi√°nyz√≥ k√∂telez≈ë oszlopok: {missing_columns}")
            return False
        
        # Adattiszt√≠t√°s
        recipes_df = recipes_df.dropna(subset=['title', 'ingredients'])
        
        # ID oszlop kezel√©se
        if 'id' not in recipes_df.columns and 'recipeid' in recipes_df.columns:
            recipes_df['id'] = recipes_df['recipeid']
        elif 'id' not in recipes_df.columns:
            recipes_df['id'] = range(1, len(recipes_df) + 1)
        
        # Pontsz√°mok normaliz√°l√°sa 0-1 k√∂z√© (mivel az eredeti √©rt√©kek nagyobbak lehetnek)
        print("üîß Pontsz√°mok normaliz√°l√°sa...")
        scaler = MinMaxScaler()
        score_columns = ['HSI', 'ESI', 'PPI']
        
        # Ellen≈ërizz√ºk a pontsz√°mok tartom√°ny√°t
        for col in score_columns:
            print(f"   {col}: {recipes_df[col].min():.2f} - {recipes_df[col].max():.2f}")
        
        recipes_df[score_columns] = scaler.fit_transform(recipes_df[score_columns])
        
        # Content-based filtering el≈ëk√©sz√≠t√©s
        print("ü§ñ Content-based filtering modell √©p√≠t√©se...")
        vectorizer = CountVectorizer(
            max_features=1000, 
            stop_words='english',
            token_pattern=r'\b[a-zA-Z√°√©√≠√≥√∂≈ë√∫√º≈±√Å√â√ç√ì√ñ≈ê√ö√ú≈∞]+\b'  # Magyar karakterek t√°mogat√°sa
        )
        
        # √ñsszetev≈ëk el≈ëfeldolgoz√°sa
        ingredients_text = recipes_df['ingredients'].fillna('').astype(str)
        ingredients_matrix = vectorizer.fit_transform(ingredients_text)
        
        print(f"‚úÖ Sikeresen bet√∂ltve {len(recipes_df)} recept")
        print(f"üìä V√©gs≈ë oszlopok: {list(recipes_df.columns)}")
        print(f"üî§ Sz√≥t√°r m√©rete: {len(vectorizer.get_feature_names_out())} sz√≥")
        
        return True
        
    except FileNotFoundError:
        print(f"‚ùå JSON f√°jl nem tal√°lhat√≥: {filename}")
        create_sample_json(filename)
        return False
    except Exception as e:
        print(f"‚ùå Hiba a JSON bet√∂lt√©sekor: {e}")
        return False

def create_sample_json(filename='greenrec_dataset.json'):
    """Minta JSON f√°jl l√©trehoz√°sa az √ñn strukt√∫r√°j√°nak megfelel≈ëen"""
    print(f"üìù Minta JSON f√°jl l√©trehoz√°sa: {filename}")
    
    sample_data = [
        {
            "recipeid": 1,
            "title": "Mediterr√°n Sal√°ta",
            "ingredients": "paradicsom, mozzarella sajt, bazsalikom, ol√≠vaolaj, balzsamecet",
            "instructions": "V√°gd fel a paradicsomot √©s a mozzarell√°t. Keverd √∂ssze bazsalikommal, ol√≠vaolajjal √©s balzsamecettel.",
            "ESI": 180.5,
            "HSI": 75.2,
            "PPI": 85,
            "category": "Sal√°ta",
            "images": "https://example.com/salad.jpg"
        },
        {
            "recipeid": 2,
            "title": "Quinoa Buddha Bowl",
            "ingredients": "quinoa, avok√°d√≥, spen√≥t, √©desburgonya, csicseribors√≥, tahini",
            "instructions": "F≈ëzd meg a quino√°t. S√ºsd meg az √©desburgony√°t. Keverd √∂ssze minden √∂sszetev≈ët tahini sz√≥sszal.",
            "ESI": 120.8,
            "HSI": 92.1,
            "PPI": 78,
            "category": "Veg√°n",
            "images": "https://example.com/bowl.jpg"
        },
        {
            "recipeid": 3,
            "title": "S√ºlt Lazac Brokkolival",
            "ingredients": "lazac fil√©, brokkoli, citrom, fokhagyma, ol√≠vaolaj, rozmaring",
            "instructions": "S√ºsd meg a lazacot ol√≠vaolajjal √©s rozmaringgal. P√°rold a brokkolit fokhagym√°val.",
            "ESI": 250.3,
            "HSI": 88.7,
            "PPI": 92,
            "category": "Hal",
            "images": "https://example.com/salmon.jpg"
        }
    ]
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(sample_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ Minta JSON f√°jl l√©trehozva: {filename}")

def assign_user_group(user_id):
    """Felhaszn√°l√≥ A/B/C csoportba sorol√°sa"""
    hash_val = int(hashlib.md5(str(user_id).encode()).hexdigest(), 16) % 3
    groups = ['A', 'B', 'C']
    return groups[hash_val]

def log_behavior(user_id, action, data=None):
    """Felhaszn√°l√≥i viselked√©s napl√≥z√°sa"""
    behavior = {
        'timestamp': datetime.now().isoformat(),
        'user_id': user_id,
        'group': session.get('group', 'unknown'),
        'action': action,
        'data': data or {}
    }
    user_behaviors.append(behavior)

def recommend_hybrid(user_input, top_n=8):
    """Hibrid aj√°nl√≥motor - Content-based + Sustainability scoring"""
    global recipes_df, vectorizer, ingredients_matrix
    
    if recipes_df is None or vectorizer is None:
        return []
    
    try:
        # Content-based filtering
        input_vec = vectorizer.transform([user_input])
        similarity = cosine_similarity(input_vec, ingredients_matrix).flatten()
        
        # M√°solat k√©sz√≠t√©se
        results = recipes_df.copy()
        results['similarity'] = similarity
        
        # Composite score sz√°m√≠t√°sa (s√∫lyozott kombin√°ci√≥)
        def composite_score(row, w_esi=0.4, w_hsi=0.4, w_ppi=0.2):
            return w_ppi * row['PPI'] + w_hsi * row['HSI'] + w_esi * row['ESI']
        
        results['sustainability_score'] = results.apply(composite_score, axis=1)
        results['final_score'] = results['similarity'] * 0.5 + results['sustainability_score'] * 0.5
        
        # Top N eredm√©ny
        top_results = results.nlargest(top_n, 'final_score')
        
        return top_results.to_dict('records')
        
    except Exception as e:
        print(f"Hiba az aj√°nl√°skor: {e}")
        return recipes_df.head(top_n).to_dict('records') if recipes_df is not None else []

def generate_explanation(recipe):
    """XAI magyar√°zatok gener√°l√°sa C csoportnak"""
    explanations = []
    
    # Eg√©szs√©g√ºgyi magyar√°zat
    if recipe['HSI'] > 0.7:
        explanations.append("üíö Kiv√°l√≥ eg√©szs√©g√ºgyi √©rt√©kkel rendelkezik")
    elif recipe['HSI'] > 0.4:
        explanations.append("üü° K√∂zepes eg√©szs√©g√ºgyi √©rt√©kkel")
    
    # K√∂rnyezeti magyar√°zat
    if recipe['ESI'] > 0.7:
        explanations.append("üå± Alacsony k√∂rnyezeti terhel√©ssel")
    elif recipe['ESI'] > 0.4:
        explanations.append("üü¢ M√©rs√©kelt k√∂rnyezeti hat√°ssal")
    
    # Szem√©lyes preferencia
    if recipe['PPI'] > 0.7:
        explanations.append("‚≠ê Az √ñn preferenci√°inak megfelel≈ë")
    elif recipe['PPI'] > 0.4:
        explanations.append("üëç Megfelelhet az √ñn √≠zl√©s√©nek")
    
    # Kateg√≥ria alap√∫ magyar√°zat
    if 'category' in recipe and recipe['category']:
        explanations.append(f"üè∑Ô∏è {recipe['category']} kateg√≥ri√°j√∫ recept")
    
    return explanations

# HTML Template-ek
HOME_TEMPLATE = """
<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GreenRec - Fenntarthat√≥ Receptaj√°nl√≥</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .group-indicator { position: fixed; top: 10px; right: 10px; z-index: 1000; }
        .recipe-card { transition: transform 0.2s; margin-bottom: 1rem; }
        .recipe-card:hover { transform: translateY(-2px); }
        .score-badge { text-align: center; padding: 0.5rem; border: 1px solid #dee2e6; border-radius: 0.375rem; margin-bottom: 0.5rem; }
        .score-value { font-size: 1.1rem; font-weight: bold; }
    </style>
</head>
<body>
    <nav class="navbar navbar-dark bg-success">
        <div class="container">
            <a class="navbar-brand" href="/">üçÉ GreenRec</a>
            <div class="navbar-nav">
                <a class="nav-link text-white" href="/status">üîß St√°tusz</a>
                <a class="nav-link text-white" href="/analytics">üìä Analytics</a>
            </div>
        </div>
    </nav>
    
    {% if group %}
    <div class="group-indicator">
        <span class="badge bg-secondary">Teszt Csoport: {{ group }}</span>
    </div>
    {% endif %}
    
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="text-center mb-4">
                    <h1>üçÉ GreenRec Fenntarthat√≥ Receptaj√°nl√≥</h1>
                    <p class="lead">Adja meg kedvenc √∂sszetev≈ëit a fenntarthat√≥ receptaj√°nl√°sok√©rt!</p>
                    
                    {% if group %}
                    <div class="alert alert-info">
                        <strong>üß™ A/B/C Teszt - Csoport {{ group }}:</strong>
                        {% if group == 'A' %}Alapvet≈ë fel√ºlet{% elif group == 'B' %}Fenntarthat√≥s√°gi pontsz√°mokkal{% else %}AI magyar√°zatokkal{% endif %}
                    </div>
                    {% endif %}
                </div>
                
                <form method="POST" action="/recommend" class="mb-4">
                    <div class="input-group input-group-lg">
                        <input type="text" name="query" class="form-control" 
                               placeholder="pl: paradicsom, mozzarella, bazsalikom" 
                               required>
                        <button type="submit" class="btn btn-success">üîç Aj√°nl√°s k√©r√©se</button>
                    </div>
                </form>
                
                <div class="row text-center">
                    <div class="col-md-4">
                        <h5>üìä {{ total_recipes }}</h5>
                        <p>El√©rhet≈ë recept</p>
                    </div>
                    <div class="col-md-4">
                        <h5>üë• {{ total_users }}</h5>
                        <p>Akt√≠v felhaszn√°l√≥</p>
                    </div>
                    <div class="col-md-4">
                        <h5>üîç {{ total_searches }}</h5>
                        <p>Keres√©s elv√©gezve</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
"""

RESULTS_TEMPLATE_A = """
<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Receptaj√°nl√°sok - GreenRec</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .recipe-card { transition: transform 0.2s; margin-bottom: 1rem; }
        .recipe-card:hover { transform: translateY(-2px); }
        .group-indicator { position: fixed; top: 10px; right: 10px; z-index: 1000; }
    </style>
</head>
<body>
    <nav class="navbar navbar-dark bg-success">
        <div class="container">
            <a class="navbar-brand" href="/">üçÉ GreenRec</a>
        </div>
    </nav>
    
    <div class="group-indicator">
        <span class="badge bg-secondary">Csoport: A</span>
    </div>
    
    <div class="container mt-4">
        <h2>üìã Receptaj√°nl√°sok</h2>
        <p class="text-muted">Keres√©s: "{{ query }}" - {{ results|length }} aj√°nl√°s</p>
        
        <div class="row">
            {% for recipe in results %}
            <div class="col-md-6 mb-3">
                <div class="card recipe-card">
                    {% if recipe.image_url %}
                    <img src="{{ recipe.image_url }}" class="card-img-top" style="height: 200px; object-fit: cover;" alt="{{ recipe.title }}">
                    {% endif %}
                    <div class="card-body">
                        <h5 class="card-title">{{ recipe.title }}</h5>
                        <p class="card-text">
                            <strong>√ñsszetev≈ëk:</strong> {{ recipe.ingredients[:100] }}...
                        </p>
                        {% if recipe.category %}
                        <span class="badge bg-primary">{{ recipe.category }}</span>
                        {% endif %}
                        <p class="card-text mt-2">
                            <small class="text-muted">Aj√°nl√°si pontsz√°m: {{ "%.2f" | format(recipe.final_score) }}</small>
                        </p>
                        <button onclick="rateRecipe({{ recipe.id }})" class="btn btn-primary btn-sm">
                            üëç Tetszik
                        </button>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
        
        <div class="text-center mt-4">
            <a href="/" class="btn btn-outline-success">üîô √öj keres√©s</a>
        </div>
    </div>
    
    <script>
    function rateRecipe(recipeId) {
        fetch('/rate/' + recipeId)
            .then(response => response.json())
            .then(data => {
                event.target.textContent = '‚úÖ √ârt√©kelve';
                event.target.disabled = true;
            });
    }
    </script>
</body>
</html>
"""

RESULTS_TEMPLATE_B = """
<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Receptaj√°nl√°sok - GreenRec</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .recipe-card { transition: transform 0.2s; margin-bottom: 1rem; }
        .recipe-card:hover { transform: translateY(-2px); }
        .group-indicator { position: fixed; top: 10px; right: 10px; z-index: 1000; }
        .score-badge { text-align: center; padding: 0.5rem; border: 1px solid #dee2e6; border-radius: 0.375rem; }
        .score-value { font-size: 1.1rem; font-weight: bold; }
    </style>
</head>
<body>
    <nav class="navbar navbar-dark bg-success">
        <div class="container">
            <a class="navbar-brand" href="/">üçÉ GreenRec</a>
        </div>
    </nav>
    
    <div class="group-indicator">
        <span class="badge bg-secondary">Csoport: B</span>
    </div>
    
    <div class="container mt-4">
        <h2>üìã Receptaj√°nl√°sok pontsz√°mokkal</h2>
        <p class="text-muted">Keres√©s: "{{ query }}" - {{ results|length }} aj√°nl√°s</p>
        
        <div class="row">
            {% for recipe in results %}
            <div class="col-md-6 mb-3">
                <div class="card recipe-card">
                    {% if recipe.image_url %}
                    <img src="{{ recipe.image_url }}" class="card-img-top" style="height: 200px; object-fit: cover;" alt="{{ recipe.title }}">
                    {% endif %}
                    <div class="card-body">
                        <h5 class="card-title">{{ recipe.title }}</h5>
                        
                        <!-- Fenntarthat√≥s√°gi pontsz√°mok -->
                        <div class="row text-center mb-3">
                            <div class="col-4">
                                <div class="score-badge">
                                    <div class="score-value text-danger">{{ (recipe.HSI * 100) | round | int }}%</div>
                                    <small>Eg√©szs√©g</small>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="score-badge">
                                    <div class="score-value text-success">{{ (recipe.ESI * 100) | round | int }}%</div>
                                    <small>K√∂rnyezet</small>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="score-badge">
                                    <div class="score-value text-info">{{ (recipe.PPI * 100) | round | int }}%</div>
                                    <small>Szem√©lyes</small>
                                </div>
                            </div>
                        </div>
                        
                        <p class="card-text">
                            <strong>√ñsszetev≈ëk:</strong> {{ recipe.ingredients[:100] }}...
                        </p>
                        {% if recipe.category %}
                        <span class="badge bg-primary">{{ recipe.category }}</span>
                        {% endif %}
                        <p class="card-text mt-2">
                            <small class="text-muted">V√©gs≈ë pontsz√°m: {{ "%.2f" | format(recipe.final_score) }}</small>
                        </p>
                        <button onclick="rateRecipe({{ recipe.id }})" class="btn btn-primary btn-sm">
                            üëç Tetszik
                        </button>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
        
        <div class="text-center mt-4">
            <a href="/" class="btn btn-outline-success">üîô √öj keres√©s</a>
        </div>
    </div>
    
    <script>
    function rateRecipe(recipeId) {
        fetch('/rate/' + recipeId)
            .then(response => response.json())
            .then(data => {
                event.target.textContent = '‚úÖ √ârt√©kelve';
                event.target.disabled = true;
            });
    }
    </script>
</body>
</html>
"""

RESULTS_TEMPLATE_C = """
<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Receptaj√°nl√°sok - GreenRec</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .recipe-card { transition: transform 0.2s; margin-bottom: 1rem; }
        .recipe-card:hover { transform: translateY(-2px); }
        .group-indicator { position: fixed; top: 10px; right: 10px; z-index: 1000; }
        .score-badge { text-align: center; padding: 0.5rem; border: 1px solid #dee2e6; border-radius: 0.375rem; }
        .score-value { font-size: 1.1rem; font-weight: bold; }
        .explanation-box { background: #f8f9fa; border-left: 4px solid #28a745; padding: 1rem; margin: 1rem 0; border-radius: 0.25rem; }
    </style>
</head>
<body>
    <nav class="navbar navbar-dark bg-success">
        <div class="container">
            <a class="navbar-brand" href="/">üçÉ GreenRec</a>
        </div>
    </nav>
    
    <div class="group-indicator">
        <span class="badge bg-secondary">Csoport: C</span>
    </div>
    
    <div class="container mt-4">
        <h2>üìã Receptaj√°nl√°sok magyar√°zatokkal</h2>
        <p class="text-muted">Keres√©s: "{{ query }}" - {{ results|length }} aj√°nl√°s</p>
        
        <div class="row">
            {% for recipe in results %}
            <div class="col-md-6 mb-3">
                <div class="card recipe-card">
                    {% if recipe.image_url %}
                    <img src="{{ recipe.image_url }}" class="card-img-top" style="height: 200px; object-fit: cover;" alt="{{ recipe.title }}">
                    {% endif %}
                    <div class="card-body">
                        <h5 class="card-title">{{ recipe.title }}</h5>
                        
                        <!-- Fenntarthat√≥s√°gi pontsz√°mok -->
                        <div class="row text-center mb-3">
                            <div class="col-4">
                                <div class="score-badge">
                                    <div class="score-value text-danger">{{ (recipe.HSI * 100) | round | int }}%</div>
                                    <small>Eg√©szs√©g</small>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="score-badge">
                                    <div class="score-value text-success">{{ (recipe.ESI * 100) | round | int }}%</div>
                                    <small>K√∂rnyezet</small>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="score-badge">
                                    <div class="score-value text-info">{{ (recipe.PPI * 100) | round | int }}%</div>
                                    <small>Szem√©lyes</small>
                                </div>
                            </div>
                        </div>
                        
                        <!-- XAI Magyar√°zatok -->
                        {% if explanations and loop.index0 < explanations|length %}
                        <div class="explanation-box">
                            <strong>üí° Mi√©rt aj√°nljuk:</strong>
                            <ul class="mb-0 mt-1">
                                {% for explanation in explanations[loop.index0] %}
                                <li><small>{{ explanation }}</small></li>
                                {% endfor %}
                            </ul>
                        </div>
                        {% endif %}
                        
                        <p class="card-text">
                            <strong>√ñsszetev≈ëk:</strong> {{ recipe.ingredients[:100] }}...
                        </p>
                        {% if recipe.category %}
                        <span class="badge bg-primary">{{ recipe.category }}</span>
                        {% endif %}
                        <p class="card-text mt-2">
                            <small class="text-muted">V√©gs≈ë pontsz√°m: {{ "%.2f" | format(recipe.final_score) }}</small>
                        </p>
                        <button onclick="rateRecipe({{ recipe.id }})" class="btn btn-primary btn-sm">
                            üëç Tetszik
                        </button>
                        <button onclick="rateExplanation({{ recipe.id }}, true)" class="btn btn-outline-secondary btn-sm">
                            üí¨ Hasznos magyar√°zat
                        </button>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
        
        <div class="text-center mt-4">
            <a href="/" class="btn btn-outline-success">üîô √öj keres√©s</a>
        </div>
    </div>
    
    <script>
    function rateRecipe(recipeId) {
        fetch('/rate/' + recipeId)
            .then(response => response.json())
            .then(data => {
                event.target.textContent = '‚úÖ √ârt√©kelve';
                event.target.disabled = true;
            });
    }

    function rateExplanation(recipeId, helpful) {
        fetch('/explanation-feedback/' + recipeId + '/' + helpful)
            .then(response => response.json())
            .then(data => {
                event.target.textContent = helpful ? '‚úÖ Hasznos' : '‚ùå Nem hasznos';
                event.target.disabled = true;
            });
    }
    </script>
</body>
</html>
"""

# Flask Route-ok
@app.route('/')
def home():
    """F≈ëoldal"""
    # Felhaszn√°l√≥ azonos√≠t√°s √©s csoportos√≠t√°s
    if 'user_id' not in session:
        session['user_id'] = hashlib.md5(str(request.environ.get('REMOTE_ADDR', 'anonymous')).encode()).hexdigest()[:8]
        session['group'] = assign_user_group(session['user_id'])
    
    # Statisztik√°k
    stats = {
        'total_recipes': len(recipes_df) if recipes_df is not None else 0,
        'total_users': len(set(b['user_id'] for b in user_behaviors)) if user_behaviors else 1,
        'total_searches': len([b for b in user_behaviors if b['action'] == 'search'])
    }
    
    # Viselked√©s napl√≥z√°sa
    log_behavior(session['user_id'], 'page_view', {'page': 'home'})
    
    return render_template_string(HOME_TEMPLATE, 
                                group=session['group'],
                                **stats)

@app.route('/recommend', methods=['POST'])
def recommend():
    """Aj√°nl√°s gener√°l√°s"""
    query = request.form.get('query', '').strip()
    user_id = session.get('user_id')
    group = session.get('group')
    
    if not query:
