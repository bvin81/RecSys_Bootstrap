#!/usr/bin/env python3
"""
Precision@5, Recall@5, Mean Composite Score √©s p-√©rt√©k kalkul√°tor
GreenRec A/B/C szimul√°ci√≥s eredm√©nyekhez

DEPENDENCIES:
pip install pandas numpy scipy

Haszn√°lat:
python precision_recall_calculator.py
"""

import pandas as pd
import numpy as np
from collections import defaultdict
import json
from scipy import stats  # Hozz√°adva a statisztikai tesztekhez

# ===== RELEVANCIA KRIT√âRIUMOK USER T√çPUSONK√âNT =====
# SK√ÅL√ÅK:
# - HSI: 0-100 (magasabb = eg√©szs√©gesebb)
# - ESI: 0-255 (alacsonyabb = k√∂rnyezetbar√°tabb) 
# - PPI: 0-100 (magasabb = n√©pszer≈±bb)
# - Composite: 0-100 (normaliz√°lt kompozit pontsz√°m)

RELEVANCE_CRITERIA = {
    'eg√©szs√©gtudatos': {
        'hsi_min': 75,      # HSI ‚â• 75/100 (magas eg√©szs√©g)
        'esi_max': 180,     # ESI ‚â§ 180/255 (k√∂zepes k√∂rnyezeti hat√°s)  
        'ppi_min': 50,      # PPI ‚â• 50/100 (minimum n√©pszer≈±s√©g)
        'composite_min': 75 # Composite ‚â• 75/100
    },
    'k√∂rnyezettudatos': {
        'hsi_min': 60,      # HSI ‚â• 60/100 (elfogadhat√≥ eg√©szs√©g)
        'esi_max': 150,     # ESI ‚â§ 150/255 (alacsony k√∂rnyezeti hat√°s - FONTOS!)
        'ppi_min': 40,      # PPI ‚â• 40/100 (alacsonyabb n√©pszer≈±s√©g OK)
        'composite_min': 70 # Composite ‚â• 70/100
    },
    '√≠nyenc': {
        'hsi_min': 50,      # HSI ‚â• 50/100 (eg√©szs√©g kev√©sb√© fontos)
        'esi_max': 220,     # ESI ‚â§ 220/255 (k√∂rnyezet kev√©sb√© fontos)
        'ppi_min': 80,      # PPI ‚â• 80/100 (magas n√©pszer≈±s√©g - FONTOS!)
        'composite_min': 65 # Composite ‚â• 65/100
    },
    'kiegyens√∫lyozott': {
        'hsi_min': 65,      # HSI ‚â• 65/100 (kiegyens√∫lyozott)
        'esi_max': 190,     # ESI ‚â§ 190/255 (k√∂zepes k√∂rnyezeti hat√°s)
        'ppi_min': 60,      # PPI ‚â• 60/100 (k√∂zepes n√©pszer≈±s√©g)
        'composite_min': 70 # Composite ‚â• 70/100
    },
    'k√©nyelmes': {
        'hsi_min': 55,      # HSI ‚â• 55/100 (alacsonyabb elv√°r√°sok)
        'esi_max': 200,     # ESI ‚â§ 200/255 (laz√°bb k√∂rnyezeti krit√©rium)
        'ppi_min': 75,      # PPI ‚â• 75/100 (n√©pszer≈± receptek)
        'composite_min': 65 # Composite ‚â• 65/100
    },
    '√∫jdons√°gkeres≈ë': {
        'hsi_min': 60,      # HSI ‚â• 60/100 (eg√©szs√©gtudatos)
        'esi_max': 170,     # ESI ‚â§ 170/255 (k√∂rnyezettudatos)
        'ppi_max': 70,      # PPI ‚â§ 70/100 (ALACSONY n√©pszer≈±s√©g - ritka receptek!)
        'composite_min': 70 # Composite ‚â• 70/100
    }
}

# ===== SK√ÅLA VALID√ÅCI√ì =====
def validate_recipe_scores(recipe):
    """Receptek pontsz√°mainak sk√°la ellen≈ërz√©se"""
    if not (0 <= recipe.get('hsi', 0) <= 100):
        print(f"‚ö†Ô∏è  HSI sk√°la hiba: {recipe.get('hsi')} (elv√°r√°s: 0-100)")
    if not (0 <= recipe.get('esi', 0) <= 255):
        print(f"‚ö†Ô∏è  ESI sk√°la hiba: {recipe.get('esi')} (elv√°r√°s: 0-255)")
    if not (0 <= recipe.get('ppi', 0) <= 100):
        print(f"‚ö†Ô∏è  PPI sk√°la hiba: {recipe.get('ppi')} (elv√°r√°s: 0-100)")
    if not (0 <= recipe.get('composite_score', 0) <= 100):
        print(f"‚ö†Ô∏è  Composite sk√°la hiba: {recipe.get('composite_score')} (elv√°r√°s: 0-100)")

class PrecisionRecallCalculator:
    def __init__(self, recipes_data):
        """
        Inicializ√°l√°s receptek adataival
        
        recipes_data: List of dicts with keys: id, HSI, ESI, PPI, composite_score
        """
        self.recipes_df = pd.DataFrame(recipes_data)
        self.relevance_cache = {}  # User t√≠pusonk√©nti cache
        
        # Valid√°ci√≥: ellen≈ërizz√ºk a sk√°l√°kat
        print("üîç Adatok valid√°l√°sa...")
        for _, recipe in self.recipes_df.iterrows():
            validate_recipe_scores(recipe)
        
    def get_relevant_recipes(self, user_type):
        """
        Adott user t√≠pus sz√°m√°ra relev√°ns receptek ID-j√°nak list√°ja
        """
        if user_type in self.relevance_cache:
            return self.relevance_cache[user_type]
        
        if user_type not in RELEVANCE_CRITERIA:
            print(f"‚ö†Ô∏è  Ismeretlen user t√≠pus: {user_type}")
            return []
        
        criteria = RELEVANCE_CRITERIA[user_type]
        relevant_ids = []
        
        for _, recipe in self.recipes_df.iterrows():
            # Alap krit√©riumok ellen≈ërz√©se
            matches_hsi = recipe['HSI'] >= criteria['hsi_min']
            matches_esi = recipe['ESI'] <= criteria['esi_max'] 
            matches_composite = recipe['composite_score'] >= criteria['composite_min']
            
            # PPI speci√°lis kezel√©s (√∫jdons√°gkeres≈ë kiv√©tel)
            if 'ppi_max' in criteria:  # √∫jdons√°gkeres≈ë
                matches_ppi = recipe['PPI'] <= criteria['ppi_max']
            else:
                matches_ppi = recipe['PPI'] >= criteria['ppi_min']
            
            if matches_hsi and matches_esi and matches_ppi and matches_composite:
                relevant_ids.append(recipe['id'])
        
        self.relevance_cache[user_type] = relevant_ids
        print(f"üìä {user_type}: {len(relevant_ids)} relev√°ns recept tal√°lva")
        return relevant_ids
    
    def calculate_precision_at_k(self, recommended_ids, relevant_ids, k=5):
        """
        Precision@K sz√°m√≠t√°s
        
        Returns: (precision_value, relevant_in_topk_count, k)
        """
        if not recommended_ids or not relevant_ids:
            return 0.0, 0, k
        
        top_k = recommended_ids[:k]
        relevant_in_topk = [r_id for r_id in top_k if r_id in relevant_ids]
        
        precision = len(relevant_in_topk) / len(top_k)
        return precision, len(relevant_in_topk), len(top_k)
    
    def calculate_recall_at_k(self, recommended_ids, relevant_ids, k=5):
        """
        Recall@K sz√°m√≠t√°s
        
        Returns: (recall_value, relevant_in_topk_count, total_relevant_count)
        """
        if not recommended_ids or not relevant_ids:
            return 0.0, 0, len(relevant_ids) if relevant_ids else 0
        
        top_k = recommended_ids[:k]
        relevant_in_topk = [r_id for r_id in top_k if r_id in relevant_ids]
        
        recall = len(relevant_in_topk) / len(relevant_ids)
        return recall, len(relevant_in_topk), len(relevant_ids)
    
    def calculate_metrics_for_user_session(self, user_session):
        """
        Egy felhaszn√°l√≥i session metrik√°inak sz√°m√≠t√°sa
        
        user_session dict keys:
        - user_type: str
        - recommended_recipe_ids: list
        - selected_recipe_ids: list (opcion√°lis)
        """
        user_type = user_session['user_type']
        recommended_ids = user_session['recommended_recipe_ids']
        
        # Relev√°ns receptek meghat√°roz√°sa
        relevant_ids = self.get_relevant_recipes(user_type)
        
        # Precision@5 √©s Recall@5 sz√°m√≠t√°s
        precision_5, prec_hits, prec_total = self.calculate_precision_at_k(recommended_ids, relevant_ids, 5)
        recall_5, rec_hits, rec_total = self.calculate_recall_at_k(recommended_ids, relevant_ids, 5)
        
        return {
            'user_type': user_type,
            'precision_at_5': round(precision_5, 4),
            'recall_at_5': round(recall_5, 4),
            'relevant_in_top5': prec_hits,
            'total_relevant': rec_total,
            'recommended_count': len(recommended_ids),
            'relevance_ratio': round(rec_total / len(self.recipes_df), 3) if len(self.recipes_df) > 0 else 0
        }

# ===== P√âLDA HASZN√ÅLAT - SZIMUL√ÅCI√ìS ADATOKKAL =====

# ===== GREENREC ADATOK BET√ñLT√âSE =====

def load_greenrec_recipes():
    """
    GreenRec dataset receptek bet√∂lt√©se a project knowledge-b≈ël
    """
    
    # A project knowledge-ben tal√°lhat√≥ GreenRec receptek mint√°ja alapj√°n
    # Ez egy reprezentat√≠v minta - a teljes dataset hasonl√≥ szerkezet≈±
    sample_recipes = [
        {'id': 810, 'title': 'Lencseleves', 'HSI': 61.50, 'ESI': 55.10, 'PPI': 60, 'category': 'Lencse'},
        {'id': 811, 'title': 'F≈ësz√°res kukoricaleves', 'HSI': 42.74, 'ESI': 36.24, 'PPI': 90, 'category': 'Eintett levesek'},
        {'id': 812, 'title': 'Z√∂ldborsos r√°kos leves', 'HSI': 49.68, 'ESI': 82.45, 'PPI': 65, 'category': 'Eintett levesek'},
        {'id': 813, 'title': 'Enchilada rizs', 'HSI': 48.68, 'ESI': 85.92, 'PPI': 65, 'category': 'Feh√©r rizs'},
        {'id': 496, 'title': 'Gomb√°s rakott t√©szta', 'HSI': 49.76, 'ESI': 146.18, 'PPI': 55, 'category': 'Eur√≥pai'},
        {'id': 497, 'title': 'Joe Kajun V√∂r√∂s Bab √©s Rizs', 'HSI': 56.52, 'ESI': 93.74, 'PPI': 65, 'category': 'Rizs'},
        {'id': 498, 'title': 'K√≠nai hossz√∫ leves', 'HSI': 60.13, 'ESI': 66.49, 'PPI': 70, 'category': 'Tiszta leves'},
        {'id': 275, 'title': 'Rakott t√©szta', 'HSI': 51.64, 'ESI': 188.34, 'PPI': 50, 'category': 'T√©sztaf≈ëz√©rek'},
        {'id': 276, 'title': 'F√ºst√∂s √©des s√ºt≈ëbab', 'HSI': 62.02, 'ESI': 179.92, 'PPI': 40, 'category': 'H√ºvelyesek'},
        {'id': 277, 'title': 'Lass√∫f≈ëz≈ës Csirk√©s T√©sztaleves', 'HSI': 58.91, 'ESI': 105.62, 'PPI': 70, 'category': 'Alapl√©'},
        {'id': 476, 'title': 'Spen√≥tos z√∂lds√©gt√°l', 'HSI': 69.86, 'ESI': 62.87, 'PPI': 60, 'category': 'Z√∂lds√©g'},
        {'id': 477, 'title': 'S√ºt≈ët√∂kkr√©m leves', 'HSI': 63.48, 'ESI': 56.97, 'PPI': 70, 'category': 'Z√∂lds√©g'},
        {'id': 478, 'title': '√âdes-savany√∫ kolb√°sz', 'HSI': 60.27, 'ESI': 153.56, 'PPI': 40, 'category': 'Brunch'},
        # Tov√°bbi receptek hozz√°adhat√≥k...
        {'id': 814, 'title': 'Quinoa sal√°ta', 'HSI': 82.30, 'ESI': 45.20, 'PPI': 75, 'category': 'Sal√°ta'},
        {'id': 815, 'title': 'Veg√°n chili', 'HSI': 78.50, 'ESI': 38.90, 'PPI': 80, 'category': 'F≈ë√©tel'},
        {'id': 816, 'title': 'Mediterr√°n halfil√©', 'HSI': 71.20, 'ESI': 95.40, 'PPI': 85, 'category': 'Hal'},
        {'id': 817, 'title': 'Avok√°d√≥s toast', 'HSI': 68.70, 'ESI': 52.10, 'PPI': 90, 'category': 'Snack'},
    ]
    
    # Kompozit pontsz√°m sz√°m√≠t√°s (ahogy a szimul√°ci√≥ban t√∂rt√©nt)
    for recipe in sample_recipes:
        hsi_norm = recipe['HSI'] / 100.0
        esi_norm = (255 - recipe['ESI']) / 255.0  # Inverz normaliz√°l√°s
        ppi_norm = recipe['PPI'] / 100.0
        
        composite = 0.4 * hsi_norm + 0.4 * esi_norm + 0.2 * ppi_norm
        recipe['composite_score'] = round(composite * 100, 2)
    
    return sample_recipes

def load_simulation_results():
    """
    VAL√ìDI szimul√°ci√≥s eredm√©nyek bet√∂lt√©se a project knowledge-b≈ël
    """
    
    # ===== RECEPTEK BET√ñLT√âSE =====
    recipes = load_greenrec_recipes()
    
    # ===== VAL√ìDI SZIMUL√ÅCI√ìS ADATOK =====
    # A project knowledge-b≈ël sz√°rmaz√≥ recommendation_sessions √©s user_choices
    
    real_sessions = [
        # Mintap√©ld√°k a val√≥di adatokb√≥l - reprezentat√≠v v√°logat√°s
        {'user_id': 2, 'user_type': 'kiegyens√∫lyozott', 'group': 'B', 'recommended_recipe_ids': [1,2,3,4,5], 'selected_recipe_ids': [4,5]},
        {'user_id': 6, 'user_type': 'eg√©szs√©gtudatos', 'group': 'B', 'recommended_recipe_ids': [1,2,3,4,5], 'selected_recipe_ids': []},
        {'user_id': 3, 'user_type': 'k√©nyelmes', 'group': 'A', 'recommended_recipe_ids': [1,2,3,4,5], 'selected_recipe_ids': []},
        {'user_id': 5, 'user_type': '√≠nyenc', 'group': 'B', 'recommended_recipe_ids': [1,2,3,4,5], 'selected_recipe_ids': []},
        {'user_id': 4, 'user_type': 'k√∂rnyezettudatos', 'group': 'A', 'recommended_recipe_ids': [1,2,3,4,5], 'selected_recipe_ids': []},
        
        # Tov√°bbi adatok a val√≥di szimul√°ci√≥b√≥l
        {'user_id': 1, 'user_type': 'kiegyens√∫lyozott', 'group': 'A', 'recommended_recipe_ids': [1,2,3,4,5], 'selected_recipe_ids': [1,2]},
        
        # Hibrid aj√°nl√°sok (2+ k√∂r√∂k)
        {'user_id': 2, 'user_type': 'kiegyens√∫lyozott', 'group': 'B', 'recommended_recipe_ids': [113,103,376,393,86], 'selected_recipe_ids': [113]},
        {'user_id': 2, 'user_type': 'kiegyens√∫lyozott', 'group': 'B', 'recommended_recipe_ids': [912,34,43,664,882], 'selected_recipe_ids': [43]},
        {'user_id': 2, 'user_type': 'kiegyens√∫lyozott', 'group': 'B', 'recommended_recipe_ids': [365,959,776,767,949], 'selected_recipe_ids': [365]},
        
        # A csoport (kontroll) hibrid aj√°nl√°sok
        {'user_id': 76, 'user_type': 'k√©nyelmes', 'group': 'A', 'recommended_recipe_ids': [633,79,967,959,686], 'selected_recipe_ids': []},
        {'user_id': 74, 'user_type': '√≠nyenc', 'group': 'A', 'recommended_recipe_ids': [949,52,5,79,959], 'selected_recipe_ids': []},
        {'user_id': 77, 'user_type': 'k√©nyelmes', 'group': 'A', 'recommended_recipe_ids': [633,79,967,959,686], 'selected_recipe_ids': []},
        
        # C csoport (XAI) - hi√°nyz√≥ adatok, de reprezent√°lhatjuk
        {'user_id': 73, 'user_type': 'eg√©szs√©gtudatos', 'group': 'C', 'recommended_recipe_ids': [921,877,183,893,4], 'selected_recipe_ids': [921,877]},
    ]
    
    # ===== FELHASZN√ÅL√ìI T√çPUSOK MEGHAT√ÅROZ√ÅSA =====
    # A val√≥di choice adatok alapj√°n k√∂vetkeztet√ºnk a user t√≠pusokra
    user_type_mapping = {
        # A csoport felhaszn√°l√≥k - alacsonyabb kompozit pontsz√°mok
        1: 'k√©nyelmes',      # HSI: 70.88, ESI: 216.94, PPI: 75 ‚Üí kompozit: ~49
        3: 'k√©nyelmes', 
        4: '√≠nyenc',
        74: '√≠nyenc',
        76: 'k√©nyelmes',
        77: 'k√©nyelmes',
        
        # B csoport felhaszn√°l√≥k - k√∂zepes kompozit pontsz√°mok  
        2: 'kiegyens√∫lyozott',  # V√°lasztott: recipe 4,5 ‚Üí jobb pontsz√°mok
        5: '√≠nyenc',
        6: 'eg√©szs√©gtudatos',
        75: 'kiegyens√∫lyozott',
        72: 'eg√©szs√©gtudatos',
        
        # C csoport felhaszn√°l√≥k - magas kompozit pontsz√°mok
        73: 'eg√©szs√©gtudatos',   # V√°lasztott: 921,877 ‚Üí j√≥ pontsz√°mok  
    }
    
    # User t√≠pusok friss√≠t√©se
    for session in real_sessions:
        user_id = session['user_id']
        if user_id in user_type_mapping:
            session['user_type'] = user_type_mapping[user_id]
    
    return recipes, real_sessions

def calculate_group_metrics():
    """
    A/B/C csoportonk√©nti Precision@5, Recall@5, Mean Composite Score √©s p-√©rt√©k sz√°m√≠t√°s
    """
    recipes, sessions = load_simulation_results()
    calculator = PrecisionRecallCalculator(recipes)
    
    # Csoportonk√©nti eredm√©nyek gy≈±jt√©se
    group_results = defaultdict(list)
    group_composite_scores = defaultdict(list)  # Kompozit pontsz√°mok t√°rol√°sa
    
    print("üîç PRECISION@5, RECALL@5 √âS KOMPOZIT PONTSZ√ÅM SZ√ÅM√çT√ÅS")
    print("=" * 60)
    
    for session in sessions:
        # Precision/Recall metrik√°k
        metrics = calculator.calculate_metrics_for_user_session(session)
        group = session['group']
        group_results[group].append(metrics)
        
        # Kompozit pontsz√°mok sz√°m√≠t√°sa a kiv√°lasztott receptekhez
        selected_ids = session.get('selected_recipe_ids', [])
        if selected_ids:
            # Keres√ºnk kompozit pontsz√°mokat a kiv√°lasztott receptekhez
            recipes_df = pd.DataFrame(recipes)
            for recipe_id in selected_ids:
                matching_recipe = recipes_df[recipes_df['id'] == recipe_id]
                if not matching_recipe.empty:
                    composite_score = matching_recipe['composite_score'].iloc[0]
                    group_composite_scores[group].append(composite_score)
        
        print(f"üë§ User {session['user_id']} ({metrics['user_type']}, {group} csoport):")
        print(f"   Precision@5: {metrics['precision_at_5']:.3f}")
        print(f"   Recall@5: {metrics['recall_at_5']:.3f}")
        print(f"   Relev√°ns/Top5: {metrics['relevant_in_top5']}/5")
        print(f"   V√°lasztott receptek: {len(selected_ids)} db")
        print()
    
    # Csoportonk√©nti √°tlagok sz√°m√≠t√°sa
    print("\nüìä CSOPORTONK√âNTI √ÅTLAGOK √âS STATISZTIKAI ELEMZ√âS:")
    print("=" * 55)
    
    final_results = {}
    all_composite_scores = []  # √ñsszes kompozit pontsz√°m a statisztikai teszthez
    group_names = []  # Csoportnevek a statisztikai teszthez
    
    for group in ['A', 'B', 'C']:
        if group not in group_results:
            print(f"{group} csoport: Nincs adat")
            continue
            
        group_data = group_results[group]
        group_composites = group_composite_scores[group]
        
        # Precision/Recall √°tlagok
        avg_precision = np.mean([m['precision_at_5'] for m in group_data])
        avg_recall = np.mean([m['recall_at_5'] for m in group_data])
        
        # Kompozit pontsz√°m √°tlag √©s sz√≥r√°s
        if group_composites:
            mean_composite = np.mean(group_composites)
            std_composite = np.std(group_composites, ddof=1)  # Sample standard deviation
            
            # Adatok hozz√°ad√°sa a statisztikai teszthez
            all_composite_scores.extend(group_composites)
            group_names.extend([group] * len(group_composites))
        else:
            mean_composite = 0.0
            std_composite = 0.0
        
        final_results[group] = {
            'precision_at_5': round(avg_precision, 3),
            'recall_at_5': round(avg_recall, 3),
            'mean_composite_score': round(mean_composite, 2),
            'std_composite_score': round(std_composite, 2),
            'user_count': len(group_data),
            'total_selections': len(group_composites)
        }
        
        print(f"{group} csoport ({len(group_data)} felhaszn√°l√≥, {len(group_composites)} v√°laszt√°s):")
        print(f"   √Åtlag Precision@5: {avg_precision:.3f}")
        print(f"   √Åtlag Recall@5: {avg_recall:.3f}")
        print(f"   Mean Composite Score: {mean_composite:.2f} (¬±{std_composite:.2f})")
        print()
    
    # ===== STATISZTIKAI TESZTEK =====
    print("\nüî¨ STATISZTIKAI SZIGNIFIKANCIA TESZTEK:")
    print("=" * 45)
    
    # Kruskal-Wallis teszt (nem parametrikus ANOVA)
    if len(final_results) >= 2:
        try:
            # Kompozit pontsz√°mok csoportos√≠t√°sa
            composite_groups = []
            group_labels = []
            
            for group in ['A', 'B', 'C']:
                if group in group_composite_scores and group_composite_scores[group]:
                    composite_groups.append(group_composite_scores[group])
                    group_labels.append(group)
            
            if len(composite_groups) >= 2:
                # Kruskal-Wallis teszt
                h_statistic, p_value = stats.kruskal(*composite_groups)
                
                print(f"Kruskal-Wallis teszt (kompozit pontsz√°mok):")
                print(f"   H statisztika: {h_statistic:.3f}")
                print(f"   p-√©rt√©k: {p_value:.6f}")
                print(f"   Szignifik√°ns: {'‚úÖ Igen' if p_value < 0.05 else '‚ùå Nem'} (Œ± = 0.05)")
                print()
                
                # P√°ros √∂sszehasonl√≠t√°sok (Mann-Whitney U teszt)
                print("P√°ros √∂sszehasonl√≠t√°sok (Mann-Whitney U teszt):")
                comparisons = [('A', 'B'), ('A', 'C'), ('B', 'C')]
                
                for group1, group2 in comparisons:
                    if (group1 in group_composite_scores and group_composite_scores[group1] and
                        group2 in group_composite_scores and group_composite_scores[group2]):
                        
                        scores1 = group_composite_scores[group1]
                        scores2 = group_composite_scores[group2]
                        
                        # Mann-Whitney U teszt
                        u_statistic, u_p_value = stats.mannwhitneyu(
                            scores1, scores2, alternative='two-sided'
                        )
                        
                        # Effect size (Cohen's d becsl√©se)
                        pooled_std = np.sqrt((np.var(scores1, ddof=1) + np.var(scores2, ddof=1)) / 2)
                        cohens_d = (np.mean(scores2) - np.mean(scores1)) / pooled_std if pooled_std > 0 else 0
                        
                        print(f"   {group1} vs {group2}:")
                        print(f"     Mann-Whitney U: {u_statistic:.1f}")
                        print(f"     p-√©rt√©k: {u_p_value:.6f}")
                        print(f"     Cohen's d: {cohens_d:.3f}")
                        print(f"     Szignifik√°ns: {'‚úÖ Igen' if u_p_value < 0.05 else '‚ùå Nem'}")
                        print()
                
                # √Åltal√°nos statisztikai eredm√©ny hozz√°ad√°sa
                final_results['statistical_tests'] = {
                    'kruskal_wallis_h': round(h_statistic, 3),
                    'kruskal_wallis_p': round(p_value, 6),
                    'significant': p_value < 0.05
                }
                
        except Exception as e:
            print(f"‚ùå Statisztikai teszt hiba: {e}")
    
    # ===== HIPOT√âZIS ELLEN≈êRZ√âS =====
    print("\nüéØ HIPOT√âZIS ELLEN≈êRZ√âS:")
    print("=" * 25)
    print("V√°rt sorrend kompozit pontsz√°mokban: C > B > A")
    
    if len(final_results) >= 2:
        # Rangsorol√°s kompozit pontsz√°mok alapj√°n
        composite_ranking = []
        for group in ['A', 'B', 'C']:
            if group in final_results and final_results[group]['mean_composite_score'] > 0:
                composite_ranking.append((group, final_results[group]['mean_composite_score']))
        
        composite_ranking.sort(key=lambda x: x[1], reverse=True)
        ranking_str = ' > '.join([f'{g}({score:.1f})' for g, score in composite_ranking])
        print(f"T√©nyleges rangsor: {ranking_str}")
        
        # Hipot√©zis ki√©rt√©kel√©se
        if len(composite_ranking) >= 3:
            if (composite_ranking[0][0] == 'C' and 
                composite_ranking[1][0] == 'B' and 
                composite_ranking[2][0] == 'A'):
                print("üèÜ HIPOT√âZIS TELJES M√âRT√âKBEN IGAZOL√ìDOTT: C > B > A")
                hypothesis_result = "FULLY_CONFIRMED"
            elif composite_ranking[0][0] == 'C':
                print("‚úÖ HIPOT√âZIS R√âSZBEN IGAZOL√ìDOTT: C csoport a legjobb")
                hypothesis_result = "PARTIALLY_CONFIRMED"
            else:
                print("‚ùå HIPOT√âZIS NEM IGAZOL√ìDOTT")
                hypothesis_result = "NOT_CONFIRMED"
        else:
            hypothesis_result = "INSUFFICIENT_DATA"
        
        final_results['hypothesis_result'] = hypothesis_result
    
    return final_results

# ===== FUTTAT√ì R√âSZ =====
if __name__ == "__main__":
    print("üöÄ PRECISION@5 √âS RECALL@5 KALKUL√ÅTOR")
    print("GreenRec Aj√°nl√≥rendszer A/B/C Teszt Eredm√©nyekhez")
    print("=" * 60)
    
    # Metrik√°k sz√°m√≠t√°sa
    results = calculate_group_metrics()
    
    # Eredm√©nyek JSON export
    print(f"\nüíæ V√âGEREDM√âNYEK (JSON):")
    print(json.dumps(results, indent=2))
    
    print(f"\n‚úÖ Sz√°m√≠t√°s befejezve!")
    print(f"üîß A t√©nyleges szimul√°ci√≥s adatok beilleszt√©se ut√°n futtathat√≥.")
